package gui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL; 
import java.sql.SQLException; 
import java.text.NumberFormat;
import java.util.*;
import java.util.List;

// Import c√°c l·ªõp c·∫ßn thi·∫øt ƒë·ªÉ l√†m vi·ªác v·ªõi CSDL
import connectDB.ConnectDB; 
import dao.MonAn_DAO;
import entity.MonAn;

// L∆ØU √ù: Ph·∫£i ƒë·∫£m b·∫£o l·ªõp ThanhToan_Gui (v·ªõi constructor Map, Map, double) t·ªìn t·∫°i 
// trong package gui ho·∫∑c import n√≥.

public class GoiMon_GUI extends JPanel {
    private NumberFormat dinhDangTien;

    private JComboBox<String> cboLoaiMon;
    private JPanel pnlDanhSachMon;
    private JTextField txtTimKiem;

    // --- Bi·∫øn cho M√≥n ƒëang g·ªçi ---
    private JTable tblMonDangGoi;
    private DefaultTableModel modelMonDangGoi;
    private JLabel lblTongTienDangGoi; 
    private Map<String, Integer> gioHang;   
    private Map<String, Integer> bangGia; // T√™n m√≥n -> Gi√° (int)
    private double tongTien = 0;              

    // --- Bi·∫øn cho T·ªïng ti·ªÅn H√≥a ƒë∆°n v√† M√≥n ƒë√£ g·ªçi ---
    private JLabel lblTongTien;             
    private JTable tblMonDaGoi;
    private DefaultTableModel modelMonDaGoi;
    private Map<String, Integer> gioHangXacNhan; 
    private double tongTienHoaDon = 0;       

    private JTextArea txtGhiChu;
    private JLabel lblTieuDeDangGoi;
    private JLabel lblTieuDeDaGoi;

    // --- BI·∫æN M·ªöI T·ª™ CSDL ---
    private MonAn_DAO monAn_DAO;
    private List<MonAn> danhSachMonAn; // Danh s√°ch m√≥n ƒÉn g·ªëc t·ª´ CSDL
    private List<MonAn> danhSachMonAnHienThi; // Danh s√°ch hi·ªÉn th·ªã sau khi l·ªçc/t√¨m ki·∫øm

    public GoiMon_GUI() throws SQLException {
        dinhDangTien = NumberFormat.getInstance(new Locale("vi", "VN"));

        gioHang = new LinkedHashMap<>();
        bangGia = new HashMap<>();
        gioHangXacNhan = new LinkedHashMap<>();

        // 1. KH·ªûI T·∫†O DAO V√Ä K·∫æT N·ªêI
        monAn_DAO = new MonAn_DAO();
        ConnectDB.getConnection(); // M·ªü k·∫øt n·ªëi
        
        // 2. T·∫¢I D·ªÆ LI·ªÜU
        taiDuLieuMonAn();
        khoiTaoGia(); // ƒê·ªï d·ªØ li·ªáu gi√° v√†o Map

        setLayout(new BorderLayout());
        setBackground(new Color(255, 235, 205));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JPanel tieuDe = new JPanel(new BorderLayout());
        tieuDe.setBackground(new Color(255, 218, 185));
        tieuDe.setBorder(BorderFactory.createEmptyBorder(10, 12, 10, 12));
        JLabel lblBack = new JLabel("‚Üê");
        lblBack.setFont(new Font("Arial", Font.BOLD, 20));
        lblBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lblBack.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // ƒê√≥ng k·∫øt n·ªëi v√† ƒë√≥ng c·ª≠a s·ªï
                JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(GoiMon_GUI.this);
                if (parent != null) {
                    ConnectDB.disconnect(); // ‚ö†Ô∏è ƒê√≥ng k·∫øt n·ªëi
                    parent.dispose();
                }
            }
        });
        
        tieuDe.add(lblBack, BorderLayout.WEST);
        JLabel lblTitle = new JLabel("G·ªçi m√≥n", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Arial", Font.BOLD, 22));
        tieuDe.add(lblTitle, BorderLayout.CENTER);
        add(tieuDe, BorderLayout.NORTH);

        JPanel pnlChinh = new JPanel(new BorderLayout(12, 12));
        pnlChinh.setBackground(new Color(245, 245, 245));
        pnlChinh.setBorder(new EmptyBorder(10, 10, 10, 10));

        JPanel pnlTrai = taoKhuVucMenu();
        JPanel pnlPhai = taoKhuVucGioHang();

        pnlChinh.add(pnlTrai, BorderLayout.CENTER);
        pnlChinh.add(pnlPhai, BorderLayout.EAST);

        add(pnlChinh, BorderLayout.CENTER);
    }

    // --- PH∆Ø∆†NG TH·ª®C M·ªöI: T·∫£i v√† Kh·ªüi t·∫°o d·ªØ li·ªáu ---
    private void taiDuLieuMonAn() {
        try {
            danhSachMonAn = monAn_DAO.layTatCaMonAn();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i danh s√°ch m√≥n ƒÉn t·ª´ CSDL: " + e.getMessage(), "L·ªói CSDL", JOptionPane.ERROR_MESSAGE);
            danhSachMonAn = new ArrayList<>(); // T·∫°o danh s√°ch r·ªóng n·∫øu l·ªói
        }
        danhSachMonAnHienThi = new ArrayList<>(danhSachMonAn); 
    }

    private void khoiTaoGia() {
        bangGia.clear(); 
        if (danhSachMonAn != null) {
            for (MonAn mon : danhSachMonAn) {
                // ƒê·ªï t√™n m√≥n v√† gi√° v√†o Map bangGia (√©p ki·ªÉu double -> int)
                bangGia.put(mon.getTenMonAn(), (int)mon.getGiaMonAn()); 
            }
        }
    }
    // ----------------------------------------------------


    private JPanel taoKhuVucMenu() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBackground(Color.WHITE);

        JPanel pnlTop = new JPanel(new BorderLayout(8, 0));
        pnlTop.setBackground(Color.WHITE);

        JPanel pnlLoai = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 4));
        pnlLoai.setBackground(Color.WHITE);
        JLabel lblLoai = new JLabel("Lo·∫°i m√≥n");
        lblLoai.setFont(new Font("Arial", Font.BOLD, 13));
        
        // ‚ö†Ô∏è L·∫§Y DANH S√ÅCH LO·∫†I M√ìN T·ª™ DAO
        List<String> loaiMonCSDL = new ArrayList<>();
        try {
            loaiMonCSDL = monAn_DAO.layDanhSachLoaiMon();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        String[] dsLoaiMoi = new String[loaiMonCSDL.size() + 1];
        dsLoaiMoi[0] = "T·∫•t c·∫£";
        for(int i = 0; i < loaiMonCSDL.size(); i++) {
            dsLoaiMoi[i+1] = loaiMonCSDL.get(i);
        }
        
        cboLoaiMon = new JComboBox<>(dsLoaiMoi);
        cboLoaiMon.setPreferredSize(new Dimension(140, 32));
        cboLoaiMon.addActionListener(e -> locMon());
        pnlLoai.add(lblLoai);
        pnlLoai.add(cboLoaiMon);
        
        // ... (ph·∫ßn code t·∫°o √¥ t√¨m ki·∫øm) ...
        JPanel pnlTim = new JPanel(new BorderLayout(4, 0));
        pnlTim.setBackground(Color.WHITE);
        pnlTim.setBorder(BorderFactory.createLineBorder(new Color(230,230,230)));
        pnlTim.setPreferredSize(new Dimension(300, 34));
        txtTimKiem = new JTextField();
        txtTimKiem.setBorder(BorderFactory.createEmptyBorder(4,8,4,4));
        JButton btnTim = new JButton("üîç");
        btnTim.setBorder(BorderFactory.createEmptyBorder());
        btnTim.setFocusPainted(false);
        btnTim.setBackground(Color.WHITE);
        btnTim.addActionListener(e -> timMon());
        pnlTim.add(txtTimKiem, BorderLayout.CENTER);
        pnlTim.add(btnTim, BorderLayout.EAST);

        pnlTop.add(pnlLoai, BorderLayout.WEST);
        pnlTop.add(pnlTim, BorderLayout.EAST);

        pnlDanhSachMon = new JPanel(new GridLayout(0, 3, 10, 12));
        pnlDanhSachMon.setBackground(Color.WHITE);
        pnlDanhSachMon.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));

        // ‚ö†Ô∏è HI·ªÇN TH·ªä M√ìN ƒÇN TH·ª∞C T·∫æ L·∫¶N ƒê·∫¶U
        hienThiMonAn(danhSachMonAnHienThi); 

        JScrollPane cuon = new JScrollPane(pnlDanhSachMon);
        cuon.setBorder(null);
        cuon.getVerticalScrollBar().setUnitIncrement(16);

        panel.add(pnlTop, BorderLayout.NORTH);
        panel.add(cuon, BorderLayout.CENTER);
        return panel;
    }
    
    /**
     * Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã c√°c item m√≥n ƒÉn l√™n pnlDanhSachMon
     */
    private void hienThiMonAn(List<MonAn> ds) {
        pnlDanhSachMon.removeAll(); // X√≥a c√°c th√†nh ph·∫ßn c≈©
        pnlDanhSachMon.setLayout(new GridLayout(0, 3, 10, 12)); // ƒê·∫£m b·∫£o layout kh√¥ng b·ªã m·∫•t
        
        if (ds != null && !ds.isEmpty()) {
            for (MonAn mon : ds) {
                // S·ª≠ d·ª•ng thu·ªôc t√≠nh c·ªßa MonAn entity
                themMon(mon.getTenMonAn(), (int)mon.getGiaMonAn(), mon.getHinhAnh());
            }
        } else {
            // Th√™m th√¥ng b√°o n·∫øu danh s√°ch r·ªóng
            pnlDanhSachMon.setLayout(new BorderLayout());
            pnlDanhSachMon.add(new JLabel("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn n√†o.", SwingConstants.CENTER), BorderLayout.CENTER);
        }
        pnlDanhSachMon.revalidate();
        pnlDanhSachMon.repaint();
    }
    
    // --- L·ªåC V√Ä T√åM KI·∫æM D·ªÆ LI·ªÜU TH·ª∞C T·∫æ ---
    private void locMon() {
        String loaiChon = (String) cboLoaiMon.getSelectedItem();
        danhSachMonAnHienThi.clear();
        String tuKhoa = txtTimKiem.getText().trim().toLowerCase();
        
        for (MonAn mon : danhSachMonAn) {
            boolean thoaManLoai = "T·∫•t c·∫£".equals(loaiChon) || mon.getLoaiMonAn().equals(loaiChon);
            boolean thoaManTimKiem = mon.getTenMonAn().toLowerCase().contains(tuKhoa);
            
            if (thoaManLoai && thoaManTimKiem) {
                danhSachMonAnHienThi.add(mon);
            }
        }
        hienThiMonAn(danhSachMonAnHienThi);
    }

    private void timMon() {
        locMon(); 
    }
    
    // ... (C√°c ph∆∞∆°ng th·ª©c kh√°c gi·ªØ nguy√™n) ...
    
    private void themMon(String ten, int gia, String imagePath) { 
        // Code t·∫°o item m√≥n ƒÉn
        JPanel item = new JPanel(new BorderLayout(6,6));
        item.setBackground(Color.WHITE);
        item.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(220,220,220)),
                BorderFactory.createEmptyBorder(8,8,8,8)
        ));
        item.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        // --- KHU V·ª∞C T·∫¢I V√Ä HI·ªÇN TH·ªä H√åNH ·∫¢NH ---
        JLabel lblAnh = new JLabel(); 
        lblAnh.setPreferredSize(new Dimension(110, 90));
        lblAnh.setOpaque(true);
        lblAnh.setBackground(new Color(250,250,250));
        lblAnh.setBorder(BorderFactory.createLineBorder(new Color(230,230,230)));
        
        // LOGIC ƒê∆Ø·ªúNG D·∫™N ƒê√É S·ª¨A ƒê·ªîI:
        // 1. Gi·ªØ nguy√™n imagePath (VD: "monan.png")
        // 2. N·ªëi v·ªõi ti·ªÅn t·ªë c·ªë ƒë·ªãnh "/src/image/"
        // internalImagePath s·∫Ω l√†: /src/image/monan.png
        String internalImagePath = "/image/" + imagePath;
        
        try {
            // T·∫£i ·∫£nh t·ª´ Classpath
            URL imageUrl = getClass().getResource(internalImagePath);
            if (imageUrl != null) {
                ImageIcon originalIcon = new ImageIcon(imageUrl);
                Image originalImage = originalIcon.getImage();
                Image scaledImage = originalImage.getScaledInstance(90, 80, Image.SCALE_SMOOTH); 
                lblAnh.setIcon(new ImageIcon(scaledImage));
                lblAnh.setHorizontalAlignment(SwingConstants.CENTER);
            } else {
                // Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n b·ªã l·ªói ƒë·ªÉ ti·ªán Debug
                lblAnh.setText("·∫¢nh (L·ªói t√¨m: " + internalImagePath + ")"); 
                lblAnh.setHorizontalAlignment(SwingConstants.CENTER);
            }
        } catch (Exception e) {
            lblAnh.setText("L·ªói ·∫¢nh");
            lblAnh.setHorizontalAlignment(SwingConstants.CENTER);
        }
        // --- K·∫æT TH√öC KHU V·ª∞C T·∫¢I ·∫¢NH ---

        JLabel lblTen = new JLabel(ten, SwingConstants.CENTER);
        lblTen.setFont(new Font("Arial", Font.BOLD, 13));

        JLabel lblGia = new JLabel(dinhDangTien.format(gia) + " VND", SwingConstants.CENTER);
        lblGia.setFont(new Font("Arial", Font.PLAIN, 12));
        lblGia.setForeground(new Color(220, 53, 69));

        JPanel pnlDuoi = new JPanel(new BorderLayout(6,6));
        pnlDuoi.setBackground(Color.WHITE);

        SpinnerNumberModel spModel = new SpinnerNumberModel(1, 1, 99, 1);
        JSpinner spSoLuong = new JSpinner(spModel);
        spSoLuong.setPreferredSize(new Dimension(60, 30));
        ((JSpinner.DefaultEditor) spSoLuong.getEditor()).getTextField().setFont(new Font("Arial", Font.BOLD, 12));

        JButton btnChon = new JButton("Ch·ªçn");
        btnChon.setBackground(new Color(40, 167, 69));
        btnChon.setForeground(Color.WHITE);
        btnChon.setFocusPainted(false);
        btnChon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnChon.addActionListener(e -> {
            int sl = (Integer) spSoLuong.getValue();
            themVaoGio(ten, gia, sl);
        });

        pnlDuoi.add(spSoLuong, BorderLayout.WEST);
        pnlDuoi.add(btnChon, BorderLayout.CENTER);

        JPanel info = new JPanel();
        info.setLayout(new BoxLayout(info, BoxLayout.Y_AXIS));
        info.setBackground(Color.WHITE);
        info.add(lblTen);
        info.add(Box.createVerticalStrut(6));
        info.add(lblGia);
        info.add(Box.createVerticalStrut(8));
        info.add(pnlDuoi);

        item.add(lblAnh, BorderLayout.NORTH);
        item.add(info, BorderLayout.CENTER);

        pnlDanhSachMon.add(item);
    }
    
    private JPanel taoKhuVucGioHang() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(Color.WHITE);
        panel.setPreferredSize(new Dimension(420, 0));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(220,220,220)),
                BorderFactory.createEmptyBorder(12,12,12,12)
        ));

        // --- KHU V·ª∞C M√ìN ƒêANG G·ªåI (GI·ªé H√ÄNG) ---
        lblTieuDeDangGoi = new JLabel("M√≥n ƒëang g·ªçi (0)");
        lblTieuDeDangGoi.setFont(new Font("Arial", Font.BOLD, 16));
        lblTieuDeDangGoi.setForeground(new Color(255, 140, 0));

        panel.add(lblTieuDeDangGoi);
        panel.add(Box.createVerticalStrut(8));

        String[] cot = {"STT", "T√™n m√≥n", "SL", "Gi√°", "Thao t√°c"};
        modelMonDangGoi = new DefaultTableModel(cot, 0) {
            public boolean isCellEditable(int r, int c) { return c == 4; }
        };
        tblMonDangGoi = new JTable(modelMonDangGoi);
        tblMonDangGoi.setRowHeight(42);
        tblMonDangGoi.setFont(new Font("Arial", Font.PLAIN, 12));
        tblMonDangGoi.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));

        DefaultTableCellRenderer canGiua = new DefaultTableCellRenderer();
        canGiua.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < 4; i++)
            tblMonDangGoi.getColumnModel().getColumn(i).setCellRenderer(canGiua);

        tblMonDangGoi.getColumnModel().getColumn(4).setCellRenderer(new NutRenderer("X√≥a", new Color(220,53,69)));
        tblMonDangGoi.getColumnModel().getColumn(4).setCellEditor(new NutEditor(new JCheckBox(), "X√≥a", new Color(220,53,69), (row) -> {
            int modelRow = tblMonDangGoi.convertRowIndexToModel(row);
            if (modelRow >= 0 && modelRow < modelMonDangGoi.getRowCount()) {
                String ten = (String) modelMonDangGoi.getValueAt(modelRow, 1);
                xoaKhoiGio(ten);
            }
        }));

        JScrollPane cuon = new JScrollPane(tblMonDangGoi);
        cuon.setPreferredSize(new Dimension(0, 190));
        panel.add(cuon);
        panel.add(Box.createVerticalStrut(8));

        // --- HI·ªÇN TH·ªä T·ªîNG TI·ªÄN CHO M√ìN ƒêANG G·ªåI (SUBTOTAL) ---
        JPanel pnlSubTotal = new JPanel(new BorderLayout());
        pnlSubTotal.setBackground(Color.WHITE);
        JLabel lblTxtSubTotal = new JLabel("T·ªïng ti·ªÅn t·∫°m t√≠nh");
        lblTxtSubTotal.setFont(new Font("Arial", Font.ITALIC, 13));
        lblTongTienDangGoi = new JLabel(dinhDangTien.format(0) + " VND", SwingConstants.RIGHT); 
        lblTongTienDangGoi.setFont(new Font("Arial", Font.BOLD, 14));
        lblTongTienDangGoi.setForeground(new Color(255, 140, 0));
        pnlSubTotal.add(lblTxtSubTotal, BorderLayout.WEST);
        pnlSubTotal.add(lblTongTienDangGoi, BorderLayout.EAST);
        panel.add(pnlSubTotal);
        panel.add(Box.createVerticalStrut(10));
        // --- K·∫æT TH√öC SUBTOTAL ---

        JLabel lblGhiChu = new JLabel("Ghi ch√∫");
        lblGhiChu.setFont(new Font("Arial", Font.BOLD, 13));
        txtGhiChu = new JTextArea(4, 20);
        txtGhiChu.setLineWrap(true);
        txtGhiChu.setWrapStyleWord(true);
        txtGhiChu.setBorder(BorderFactory.createLineBorder(new Color(230,230,230)));
        JScrollPane cuonGhiChu = new JScrollPane(txtGhiChu);
        cuonGhiChu.setPreferredSize(new Dimension(0, 70));

        panel.add(lblGhiChu);
        panel.add(Box.createVerticalStrut(6));
        panel.add(cuonGhiChu);
        panel.add(Box.createVerticalStrut(10));

        JPanel pnlNut = new JPanel(new BorderLayout(8,8));
        pnlNut.setBackground(Color.WHITE);
        JButton btnXacNhan = new JButton("X√°c nh·∫≠n");
        btnXacNhan.setBackground(new Color(40,167,69));
        btnXacNhan.setForeground(Color.WHITE);
        btnXacNhan.setFont(new Font("Arial", Font.BOLD, 14));
        btnXacNhan.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnXacNhan.addActionListener(e -> xacNhanDon());

        JButton btnHuy = new JButton("H·ªßy");
        btnHuy.setBackground(new Color(220,53,69));
        btnHuy.setForeground(Color.WHITE);
        btnHuy.setFont(new Font("Arial", Font.BOLD, 14));
        btnHuy.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnHuy.addActionListener(e -> huyDon());

        pnlNut.add(btnXacNhan, BorderLayout.CENTER);
        pnlNut.add(btnHuy, BorderLayout.EAST);

        panel.add(pnlNut);
        panel.add(Box.createVerticalStrut(12));
        panel.add(new JSeparator());
        panel.add(Box.createVerticalStrut(8));

        // --- KHU V·ª∞C M√ìN ƒê√É G·ªåI V√Ä T·ªîNG TI·ªÄN C·ªòNG D·ªíN ---
        lblTieuDeDaGoi = new JLabel("M√≥n ƒë√£ g·ªçi (0)");
        lblTieuDeDaGoi.setFont(new Font("Arial", Font.BOLD, 16));
        lblTieuDeDaGoi.setForeground(new Color(255, 140, 0));
        panel.add(lblTieuDeDaGoi);
        panel.add(Box.createVerticalStrut(8));

        String[] cot2 = {"STT", "T√™n m√≥n", "SL", "Gi√°"};
        modelMonDaGoi = new DefaultTableModel(cot2, 0) {
            public boolean isCellEditable(int r, int c) { return false; } 
        };
        tblMonDaGoi = new JTable(modelMonDaGoi);
        tblMonDaGoi.setRowHeight(36);
        tblMonDaGoi.setFont(new Font("Arial", Font.PLAIN, 12));
        tblMonDaGoi.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        
        DefaultTableCellRenderer canGiua2 = new DefaultTableCellRenderer();
        canGiua2.setHorizontalAlignment(JLabel.CENTER);
        tblMonDaGoi.getColumnModel().getColumn(0).setCellRenderer(canGiua2);
        tblMonDaGoi.getColumnModel().getColumn(1).setCellRenderer(canGiua2);
        tblMonDaGoi.getColumnModel().getColumn(2).setCellRenderer(canGiua2);

        DefaultTableCellRenderer canPhai2 = new DefaultTableCellRenderer();
        canPhai2.setHorizontalAlignment(JLabel.RIGHT);
        tblMonDaGoi.getColumnModel().getColumn(3).setCellRenderer(canPhai2);

        JScrollPane cuon2 = new JScrollPane(tblMonDaGoi);
        cuon2.setPreferredSize(new Dimension(0, 140));
        panel.add(cuon2);
        panel.add(Box.createVerticalStrut(8));

        // T·ªîNG TI·ªÄN CU·ªêI C√ôNG (C·ªòNG D·ªíN)
        JPanel pnlTong = new JPanel(new BorderLayout());
        pnlTong.setBackground(Color.WHITE);
        JLabel lblTxtTong = new JLabel("T·ªïng ti·ªÅn h√≥a ƒë∆°n");
        lblTxtTong.setFont(new Font("Arial", Font.BOLD, 14));
        lblTongTien = new JLabel(dinhDangTien.format(tongTienHoaDon) + " VND", SwingConstants.RIGHT); 
        lblTongTien.setFont(new Font("Arial", Font.BOLD, 16));
        lblTongTien.setForeground(new Color(220,53,69));

        pnlTong.add(lblTxtTong, BorderLayout.WEST);
        pnlTong.add(lblTongTien, BorderLayout.EAST);
        panel.add(pnlTong);
        panel.add(Box.createVerticalStrut(10));

        JButton btnThanhToan = new JButton("Thanh to√°n");
        btnThanhToan.setBackground(new Color(0, 123, 255));
        btnThanhToan.setForeground(Color.WHITE);
        btnThanhToan.setFont(new Font("Arial", Font.BOLD, 14));
        btnThanhToan.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnThanhToan.addActionListener(e -> thanhToan()); 
        panel.add(btnThanhToan);

        return panel;
    }

    private void themVaoGio(String ten, int gia, int sl) {
        if (gioHang.containsKey(ten))
            gioHang.put(ten, gioHang.get(ten) + sl);
        else
            gioHang.put(ten, sl);
        capNhatBangGio();
        JOptionPane.showMessageDialog(this, "ƒê√£ th√™m " + sl + " " + ten + " v√†o gi·ªè h√†ng");
    }

    private void capNhatBangGio() {
        modelMonDangGoi.setRowCount(0);
        int stt = 1;
        tongTien = 0; 
        for (Map.Entry<String, Integer> e : gioHang.entrySet()) {
            String ten = e.getKey();
            int sl = e.getValue();
            // L·∫•y gi√° t·ª´ Map bangGia ƒë√£ ƒë∆∞·ª£c load t·ª´ CSDL
            int gia = bangGia.getOrDefault(ten, 0); 
            modelMonDangGoi.addRow(new Object[]{stt++, ten, sl, dinhDangTien.format((long)gia * sl) + " VND", "X√≥a"});
            tongTien += (long)gia * sl;
        }
        
        lblTongTienDangGoi.setText(dinhDangTien.format(tongTien) + " VND"); 
        
        lblTieuDeDangGoi.setText("M√≥n ƒëang g·ªçi (" + gioHang.size() + ")");
    }

    private void xoaKhoiGio(String ten) {
        gioHang.remove(ten);
        capNhatBangGio();
    }
    
    private void huyDon() {
        if (gioHang.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Gi·ªè h√†ng r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ h·ªßy.", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
             return;
        }

        if (JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n ƒëang g·ªçi?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            gioHang.clear();
            capNhatBangGio();
            JOptionPane.showMessageDialog(this, "ƒê∆°n h√†ng ƒëang g·ªçi ƒë√£ ƒë∆∞·ª£c h·ªßy.");
        }
    }

    private void xacNhanDon() {
        if (gioHang.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gi·ªè h√†ng r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√°c nh·∫≠n!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 1. C·ªòNG D·ªíN D·ªÆ LI·ªÜU
        for (Map.Entry<String, Integer> entry : gioHang.entrySet()) {
            String ten = entry.getKey();
            int slThem = entry.getValue();
            
            if (gioHangXacNhan.containsKey(ten)) {
                gioHangXacNhan.put(ten, gioHangXacNhan.get(ten) + slThem);
            } else {
                gioHangXacNhan.put(ten, slThem);
            }
        }
        
        // 2. T√çNH T·ªîNG TI·ªÄN C·ªòNG D·ªíN V√Ä C·∫¨P NH·∫¨T B·∫¢NG M√ìN ƒê√É G·ªåI
        modelMonDaGoi.setRowCount(0);
        int stt = 1;
        tongTienHoaDon = 0; 
        
        for (Map.Entry<String, Integer> e : gioHangXacNhan.entrySet()) {
            String ten = e.getKey();
            int sl = e.getValue();
            if (bangGia.containsKey(ten)) {
                 int gia = bangGia.get(ten);
                 long thanhTien = (long)gia * sl;
                 
                 // Th√™m m√≥n v√†o b·∫£ng M√≥n ƒë√£ g·ªçi (ch·ªâ c√≤n 4 c·ªôt)
                 modelMonDaGoi.addRow(new Object[]{stt++, ten, sl, dinhDangTien.format(thanhTien) + " VND"});
                 tongTienHoaDon += thanhTien; 
            }
        }
        lblTieuDeDaGoi.setText("M√≥n ƒë√£ g·ªçi (" + gioHangXacNhan.size() + ")");


        // 3. L√ÄM S·∫†CH GI·ªé H√ÄNG ƒêANG G·ªåI V√Ä C·∫¨P NH·∫¨T T·ªîNG TI·ªÄN C·ªòNG D·ªíN
        gioHang.clear();
        capNhatBangGio(); 
        
        lblTongTien.setText(dinhDangTien.format(tongTienHoaDon) + " VND");

        // L√ÄM S·∫†CH √î GHI CH√ö SAU KHI X√ÅC NH·∫¨N
        txtGhiChu.setText(""); 

        JOptionPane.showMessageDialog(this, "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng! C√°c m√≥n ƒëang g·ªçi ƒë√£ ƒë∆∞·ª£c g·ª≠i xu·ªëng b·∫øp.");
    }
    
    // =========================================================================
    // === PH∆Ø∆†NG TH·ª®C L√ÄM M·ªöI (M·ªöI TH√äM) =====================================
    // =========================================================================
    /**
     * L√†m m·ªõi tr·∫°ng th√°i GUI sau khi h√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c thanh to√°n xong
     */
    public void lamMoiSauThanhToan() {
        gioHangXacNhan.clear();
        tongTienHoaDon = 0;
        modelMonDaGoi.setRowCount(0);
        lblTongTien.setText(dinhDangTien.format(tongTienHoaDon) + " VND");
        lblTieuDeDaGoi.setText("M√≥n ƒë√£ g·ªçi (0)");
        
        // ƒê·∫£m b·∫£o gi·ªè h√†ng ƒëang g·ªçi c≈©ng r·ªóng (n·∫øu ch∆∞a x√°c nh·∫≠n)
        gioHang.clear();
        capNhatBangGio(); 
        txtGhiChu.setText("");
        
        // C·∫ßn th√¥ng b√°o n√†y ƒë·ªÉ bi·∫øt qu√° tr√¨nh hi·ªán l·∫°i trang ƒë√£ th√†nh c√¥ng
        // (N·∫øu kh√¥ng mu·ªën th√¥ng b√°o, c√≥ th·ªÉ x√≥a d√≤ng n√†y)
        JOptionPane.showMessageDialog(this, "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† ƒë∆°n h√†ng ƒë√£ l√†m m·ªõi!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
    }

    // =========================================================================
    // === PH∆Ø∆†NG TH·ª®C THANH TO√ÅN (ƒê√É S·ª¨A ƒê·ªîI) ================================
    // =========================================================================
    /**
     * M·ªü giao di·ªán ThanhToan_Gui v√† truy·ªÅn d·ªØ li·ªáu h√≥a ƒë∆°n.
     */
    private void thanhToan() {
        if (gioHangXacNhan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c x√°c nh·∫≠n ƒë·ªÉ thanh to√°n!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 1. L·∫•y c·ª≠a s·ªï ch√≠nh (JFrame) ƒëang ch·ª©a JPanel n√†y
        JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        
        if (parentFrame == null) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï cha ƒë·ªÉ m·ªü m√†n h√¨nh thanh to√°n.", "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. ·∫®N C·ª¨A S·ªî G·ªåI M√ìN
        parentFrame.setVisible(false);

        // 3. T·∫†O V√Ä C·∫§U H√åNH C·ª¨A S·ªî THANH TO√ÅN
        JFrame thanhToanFrame = new JFrame("Thanh to√°n");
        thanhToanFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        thanhToanFrame.setSize(1000, 750);
        thanhToanFrame.setLocationRelativeTo(null);
        
        // Tham chi·∫øu ƒë·∫øn GUI hi·ªán t·∫°i ƒë·ªÉ g·ªçi ph∆∞∆°ng th·ª©c l√†m m·ªõi
        GoiMon_GUI currentGui = this;

        // 4. ƒê√çNH K√àM WindowListener ƒê·ªÇ HI·ªÜN L·∫†I C·ª¨A S·ªî G·ªåI M√ìN
        thanhToanFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent windowEvent) {
                // HI·ªÜN L·∫†I C·ª¨A S·ªî G·ªåI M√ìN KHI C·ª¨A S·ªî THANH TO√ÅN ƒê√ìNG
                parentFrame.setVisible(true);
                parentFrame.toFront();
                
                // X√≥a d·ªØ li·ªáu c≈© sau khi thanh to√°n th√†nh c√¥ng
                currentGui.lamMoiSauThanhToan(); 
            }
        });

        try {
            // KH·ªûI T·∫†O ThanhToan_Gui TH·ª∞C T·∫æ
            // L∆ØU √ù: Ph·∫£i ƒë·∫£m b·∫£o ThanhToan_Gui ƒë√£ ƒë∆∞·ª£c bi√™n d·ªãch v√† c√≥ constructor n√†y
            ThanhToan_GUI thanhToanPanel = new ThanhToan_GUI(gioHangXacNhan, bangGia, tongTienHoaDon);
            thanhToanFrame.setContentPane(thanhToanPanel);
            
        } catch (Exception e) {
             JOptionPane.showMessageDialog(this, "L·ªói khi kh·ªüi t·∫°o m√†n h√¨nh Thanh to√°n: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
             parentFrame.setVisible(true); // N·∫øu l·ªói, hi·ªán l·∫°i c·ª≠a s·ªï cha ngay l·∫≠p t·ª©c
             return;
        }

        thanhToanFrame.setVisible(true);
    }
    // =========================================================================
    
    class NutRenderer extends JButton implements TableCellRenderer {
        public NutRenderer(String text, Color color) {
            setText(text);
            setOpaque(true);
            setBackground(color);
            setForeground(Color.WHITE);
            setFocusPainted(false);
            setFont(new Font("Arial", Font.BOLD, 12));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }

    class NutEditor extends DefaultCellEditor {
        private JButton btn;
        private ActionListener listener;

        public NutEditor(JCheckBox checkBox, String text, Color color, java.util.function.Consumer<Integer> onClick) {
            super(checkBox);
            btn = new JButton(text);
            btn.setBackground(color);
            btn.setForeground(Color.WHITE);
            btn.setFocusPainted(false);
            btn.setFont(new Font("Arial", Font.BOLD, 12));
            listener = e -> onClick.accept(tblMonDangGoi.getSelectedRow());
            btn.addActionListener(listener);
        }

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            return btn;
        }

        public Object getCellEditorValue() {
            return null;
        }
    }

    public static void main(String[] args) throws SQLException {
        // ‚ö†Ô∏è M·ªü k·∫øt n·ªëi tr∆∞·ªõc khi kh·ªüi t·∫°o GUI
        ConnectDB.getConnection(); 

        JFrame f = new JFrame("G·ªçi m√≥n");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setSize(1200, 720);
        f.setLocationRelativeTo(null);
        f.setContentPane(new GoiMon_GUI());
        f.setVisible(true);
        
        // ‚ö†Ô∏è ƒê√≥ng k·∫øt n·ªëi khi ·ª©ng d·ª•ng tho√°t
        f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                ConnectDB.disconnect();
            }
        });
    }
}