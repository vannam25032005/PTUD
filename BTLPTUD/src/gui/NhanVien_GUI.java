package gui;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.*;
// Import SQLException
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.toedter.calendar.JDateChooser;

import dao.NhanVien_DAO;
import entity.NhanVien;
import entity.QuanLy;

import java.util.List;
import java.text.ParseException;

public class NhanVien_GUI extends JPanel {
    private JTextField txtEmployeeId, txtName, txtIdNumber, txtPhone, txtEmail;
    private JDateChooser dateChooserBirthDate;
    private JRadioButton rbMale, rbFemale;
    private JComboBox<String> cbStatus;
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField txtSearch;
    
    // üí° KH·ªûI T·∫†O DAO T·∫†I ƒê√ÇY
    private NhanVien_DAO nhanVien_DAO = new NhanVien_DAO(); // ƒê·ªïi t√™n ƒë·ªÉ tr√°nh xung ƒë·ªôt

    // Constructor ƒë√£ s·ª≠a
    public NhanVien_GUI() {
        // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn GUI
        setLayout(new BorderLayout(15, 15));
        setBackground(new Color(255, 235, 205));
        setBorder(BorderFactory.createEmptyBorder(30, 40, 30, 40));

        JLabel titleLabel = new JLabel("QU·∫¢N L√ù NH√ÇN VI√äN", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 36));
        titleLabel.setForeground(new Color(139, 69, 19));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 20, 0));
        
        // 1. T·∫†O FORM V√Ä B·∫¢NG TR∆Ø·ªöC
        JPanel formPanel = createFormPanel();
        
        JPanel bottomPanel = new JPanel(new BorderLayout(15, 15));
        bottomPanel.setBackground(new Color(255, 235, 205));
        JPanel searchPanel = createSearchPanel();
        JScrollPane tableScrollPane = createTable();
        bottomPanel.add(searchPanel, BorderLayout.NORTH);
        bottomPanel.add(tableScrollPane, BorderLayout.CENTER);

        // 2. T·∫†O TOP PANEL ƒê·ªÇ G·ªòP TITLE V√Ä FORM
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(new Color(255, 235, 205)); // ƒê·ªìng b·ªô m√†u n·ªÅn
        topPanel.add(titleLabel, BorderLayout.NORTH);
        topPanel.add(formPanel, BorderLayout.CENTER);
        
        // 3. TH√äM TOP PANEL V√ÄO NORTH
        add(topPanel, BorderLayout.NORTH);

        // 4. TH√äM BOTTOM PANEL (CH·ª®A B·∫¢NG) V√ÄO CENTER
        add(bottomPanel, BorderLayout.CENTER);

        // 5. G·ªåI LOAD D·ªÆ LI·ªÜU
        loadDataToTable();
        clearForm(); // X√≥a form v√† thi·∫øt l·∫≠p tr·∫°ng th√°i ban ƒë·∫ßu
    }

    //H√ÄM THI·∫æT L·∫¨P BAN ƒê·∫¶U CHO FORM
    private void clearForm() {
        txtEmployeeId.setText("");
        txtName.setText("");
        dateChooserBirthDate.setDate(null);
        txtIdNumber.setText("");
        txtPhone.setText("");
        txtEmail.setText("");

        // C·∫ßn ph·∫£i ch·ªçn m·∫∑c ƒë·ªãnh cho Gi·ªõi t√≠nh n·∫øu c·ªôt n√†y l√† NOT NULL
        rbMale.setSelected(true); // Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh l√† Nam

        cbStatus.setSelectedIndex(0);
    }
    
    private JPanel createFormPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(245, 222, 179));
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(210, 180, 140), 2),
            BorderFactory.createEmptyBorder(25, 30, 25, 30)
        ));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 10, 8, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Row 1: M√£ nh√¢n vi√™n, H·ªç t√™n
        gbc.gridx = 0; gbc.gridy = 0; gbc.weightx = 0.2;
        panel.add(createLabel("M√£ nh√¢n vi√™n"), gbc);
        gbc.gridx = 1; gbc.weightx = 0.8;
        txtEmployeeId = createStyledTextField();
        panel.add(txtEmployeeId, gbc);
        gbc.gridx = 2; gbc.weightx = 0.2;
        panel.add(createLabel("H·ªç t√™n"), gbc);
        gbc.gridx = 3; gbc.weightx = 0.8;
        txtName = createStyledTextField();
        panel.add(txtName, gbc);

        // Row 2: Ng√†y sinh, S·ªë CCCD
        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0.2;
        panel.add(createLabel("Ng√†y sinh"), gbc);
        gbc.gridx = 1; gbc.weightx = 0.8;
        dateChooserBirthDate = new JDateChooser();
        dateChooserBirthDate.setDateFormatString("dd/MM/yyyy");
        // S·ª≠a l·ªói: L·∫•y th√†nh ph·∫ßn UI c·ªßa DateEditor m·ªôt c√°ch an to√†n
        Component dateEditorComponent = dateChooserBirthDate.getDateEditor().getUiComponent();
        if (dateEditorComponent instanceof JTextField) {
            JTextField dateEditorTextField = (JTextField) dateEditorComponent;
            styleTextField(dateEditorTextField);
            dateEditorTextField.setEditable(false);
        }
        JPanel dateWrapperPanel = new JPanel(new GridLayout(1, 1));
        dateWrapperPanel.add(dateChooserBirthDate);
        gbc.ipady = 10;
        panel.add(dateWrapperPanel, gbc);
        gbc.ipady = 0;

        gbc.gridx = 2; gbc.weightx = 0.2;
        panel.add(createLabel("S·ªë CCCD"), gbc);
        gbc.gridx = 3; gbc.weightx = 0.8;
        txtIdNumber = createStyledTextField();
        panel.add(txtIdNumber, gbc);

        // Row 3: Gi·ªõi t√≠nh, S·ªë ƒëi·ªán tho·∫°i
        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0.2;
        panel.add(createLabel("Gi·ªõi t√≠nh"), gbc);
        gbc.gridx = 1; gbc.weightx = 0.8;
        JPanel genderPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        genderPanel.setBackground(new Color(245, 222, 179));
        rbMale = new JRadioButton("Nam");
        rbFemale = new JRadioButton("N·ªØ");
        rbMale.setBackground(new Color(245, 222, 179));
        rbFemale.setBackground(new Color(245, 222, 179));
        rbMale.setFont(new Font("Arial", Font.PLAIN, 14));
        rbFemale.setFont(new Font("Arial", Font.PLAIN, 14));
        ButtonGroup genderGroup = new ButtonGroup();
        genderGroup.add(rbMale);
        genderGroup.add(rbFemale);
        rbMale.setSelected(true); // Ch·ªçn m·∫∑c ƒë·ªãnh Nam
        genderPanel.add(rbMale);
        genderPanel.add(rbFemale);
        panel.add(genderPanel, gbc);

        gbc.gridx = 2; gbc.gridy = 2; gbc.weightx = 0.2;
        panel.add(createLabel("S·ªë ƒëi·ªán tho·∫°i"), gbc);
        gbc.gridx = 3; gbc.weightx = 0.8;
        txtPhone = createStyledTextField();
        panel.add(txtPhone, gbc);

        // Row 4: Email, Tr·∫°ng th√°i l√†m vi·ªác
        gbc.gridx = 0; gbc.gridy = 3; gbc.weightx = 0.2;
        panel.add(createLabel("Email"), gbc);
        gbc.gridx = 1; gbc.weightx = 0.8;
        txtEmail = createStyledTextField();
        panel.add(txtEmail, gbc);

        gbc.gridx = 2; gbc.gridy = 3; gbc.weightx = 0.2;
        panel.add(createLabel("Tr·∫°ng th√°i l√†m vi·ªác"), gbc);
        gbc.gridx = 3; gbc.weightx = 0.8;
        cbStatus = new JComboBox<>(new String[]{"ƒêang l√†m vi·ªác", "Ngh·ªâ vi·ªác", "T·∫°m ngh·ªâ"});
        cbStatus.setFont(new Font("Arial", Font.PLAIN, 14));
        cbStatus.setBackground(Color.WHITE);
        panel.add(cbStatus, gbc);

        // Row 5: Buttons
        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.EAST;
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        buttonPanel.setBackground(new Color(245, 222, 179));
        
        JButton btnAdd = createFormButton("Th√™m nh√¢n vi√™n", new Color(76, 175, 80), new Color(56, 142, 60), 160);
        btnAdd.addActionListener(e -> addEmployee());

        JButton btnEdit = createFormButton("Ch·ªânh s·ª≠a th√¥ng tin", new Color(234, 196, 28), new Color(245, 166, 35), 180);
        btnEdit.addActionListener(e -> editEmployee());

        buttonPanel.add(btnAdd);
        buttonPanel.add(btnEdit);
        panel.add(buttonPanel, gbc);

        return panel;
    }

    private JButton createFormButton(String text, Color bgColor, Color borderColor, int width) {
        JButton button = new JButton(text);
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setPreferredSize(new Dimension(width, 40));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(borderColor, 2),
            BorderFactory.createEmptyBorder(5, 15, 5, 15)
        ));
        return button;
    }

    private JLabel createLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setForeground(new Color(62, 39, 35));
        return label;
    }

    private JTextField createStyledTextField() {
        JTextField textField = new JTextField();
        styleTextField(textField);
        return textField;
    }

    private void styleTextField(JTextField textField) {
        textField.setFont(new Font("Arial", Font.PLAIN, 14));
        textField.setBackground(Color.WHITE);
        textField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
    }

    private JPanel createSearchPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 10));
        panel.setBackground(new Color(255, 235, 205));

        JLabel lblSearch = new JLabel("T√¨m theo M√£ Nh√¢n Vi√™n:");
        lblSearch.setFont(new Font("Arial", Font.BOLD, 14));
        lblSearch.setForeground(new Color(62, 39, 35));

        txtSearch = new JTextField(35);
        txtSearch.setFont(new Font("Arial", Font.PLAIN, 14));
        txtSearch.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),
            BorderFactory.createEmptyBorder(8, 12, 8, 12)
        ));

        JButton btnSearch = new JButton("T√¨m ki·∫øm");
        btnSearch.setFocusPainted(false);
        btnSearch.setFont(new Font("Arial", Font.BOLD, 13));
        btnSearch.setBackground(new Color(33, 150, 243));
        btnSearch.setForeground(Color.WHITE);
        btnSearch.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnSearch.setPreferredSize(new Dimension(130, 35));
        btnSearch.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(25, 118, 210), 2),
            BorderFactory.createEmptyBorder(3, 10, 3, 10)
        ));
        btnSearch.addActionListener(e -> searchEmployee());

        panel.add(lblSearch);
        panel.add(txtSearch);
        panel.add(btnSearch);

        return panel;
    }

    private JScrollPane createTable() {
        String[] columns = {"M√£", "T√™n nh√¢n vi√™n", "Ng√†y sinh", "S·ªë CCCD", "S·ªë ƒëi·ªán tho·∫°i", "Gi·ªõi t√≠nh", "Email", "Tr·∫°ng Th√°i"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table = new JTable(tableModel);
        table.setRowHeight(35);
        table.setFont(new Font("Arial", Font.PLAIN, 13));
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setSelectionBackground(new Color(135, 206, 250));
        table.setSelectionForeground(Color.BLACK);
        table.setGridColor(new Color(220, 220, 220));
        table.setShowGrid(true);
        table.setIntercellSpacing(new Dimension(1, 1));
        table.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    loadSelectedRow();
                }
            }
        });

        JTableHeader header = table.getTableHeader();
        header.setBackground(new Color(255, 178, 102));
        header.setForeground(new Color(62, 39, 35));
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setPreferredSize(new Dimension(header.getWidth(), 40));
        header.setBorder(BorderFactory.createLineBorder(new Color(210, 180, 140), 2));

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(210, 180, 140), 2));

        return scrollPane;
    }

    private void loadDataToTable() {
        tableModel.setRowCount(0);

        List<NhanVien> dsNV = nhanVien_DAO.getAllNhanVien();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        for (NhanVien nv : dsNV) {
            
            // üí° FIX: S·ª¨A L·ªñI LOGIC T·∫†I ƒê√ÇY:
            // true l√† "N·ªØ", false l√† "Nam" (ƒë·ªÉ kh·ªõp v·ªõi h√†m addEmployee)
            String gioiTinhStr = (nv.getGioiTinh() != null && nv.getGioiTinh()) ? "N·ªØ" : "Nam";
            
            // X·ª≠ l√Ω ng√†y sinh an to√†n
            String ngaySinhStr = (nv.getNgaySinh() != null) ? sdf.format(nv.getNgaySinh()) : "";

            tableModel.addRow(new Object[]{
                nv.getMaNV(),
                nv.getHoTen(),
                ngaySinhStr,
                nv.getCCCD(),
                nv.getSoDienThoai(),
                gioiTinhStr,
                nv.getEmail(),
                nv.getTrangThai()
            });
        }
    }

    private void addEmployee() {
        // 1. Get data from form and validate input
        String maNV = txtEmployeeId.getText().trim();
        String hoTen = txtName.getText().trim();
        java.util.Date ngaySinh = dateChooserBirthDate.getDate();
        String cccd = txtIdNumber.getText().trim();
        String sdt = txtPhone.getText().trim();

        // üí° X·ª≠ l√Ω gi·ªõi t√≠nh: Gi·ªõi t√≠nh l√† NOT NULL trong CSDL (BIT NOT NULL)
        Boolean gioiTinh = null; 
        if (rbMale.isSelected()) gioiTinh = false; // 0: Nam (BIT false)
        else if (rbFemale.isSelected()) gioiTinh = true; // 1: N·ªØ (BIT true)
        
        // Ki·ªÉm tra Gi·ªõi t√≠nh: N·∫øu kh√¥ng ch·ªçn v√† CSDL l√† NOT NULL
        if (gioiTinh == null) {
             JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh.", "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
             return;
        }

        String email = txtEmail.getText().trim();
        String trangThai = cbStatus.getSelectedItem().toString();
        String maQL = "QL001"; // Hardcoded manager ID (C·∫ßn ƒë·∫£m b·∫£o QL001 t·ªìn t·∫°i)

        try {
            // 2. Validation (Check if fields are empty, if not handled by individual setters in Entity)
            if (maNV.isEmpty() || hoTen.isEmpty() || cccd.isEmpty() || sdt.isEmpty() || trangThai.isEmpty()) {
                 throw new IllegalArgumentException("C√°c tr∆∞·ªùng M√£ NV, H·ªç t√™n, CCCD, SƒêT, Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }
            
            

            NhanVien nv = new NhanVien(maNV, hoTen, cccd, sdt, email, gioiTinh, ngaySinh, trangThai, new QuanLy(maQL));

            // 4. Call DAO (throws SQLException)
            nhanVien_DAO.addNhanVien(nv);

            // 5. Success
            loadDataToTable();
            clearForm();
            JOptionPane.showMessageDialog(this, "ƒê√£ th√™m nh√¢n vi√™n th√†nh c√¥ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);

        } catch (IllegalArgumentException e_val) {
            JOptionPane.showMessageDialog(this, e_val.getMessage(), "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e_sql) {
            handleSQLException(e_sql, maNV, cccd, maQL, "Th√™m");
        } catch (Exception e_all) {
            e_all.printStackTrace();
            JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Chi ti·∫øt: " + e_all.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void editEmployee() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a!", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. Get data from form and validate
        String maNV = txtEmployeeId.getText().trim();
        String hoTen = txtName.getText().trim();
        java.util.Date ngaySinh = dateChooserBirthDate.getDate();
        String cccd = txtIdNumber.getText().trim();
        String sdt = txtPhone.getText().trim();
        String email = txtEmail.getText().trim();
        String trangThai = cbStatus.getSelectedItem().toString();

        Boolean gioiTinh = null;
        if (rbMale.isSelected()) gioiTinh = false; 
        else if (rbFemale.isSelected()) gioiTinh = true;

        if (maNV.isEmpty() || hoTen.isEmpty() || cccd.isEmpty() || sdt.isEmpty() || trangThai.isEmpty() || gioiTinh == null) {
             JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.", "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
             return;
        }

        try {
            // 2. GET OLD MANAGER ID (maQL) and CHUCVU
            NhanVien nvHienTai = nhanVien_DAO.findNhanVienById(maNV);
            if (nvHienTai == null) {
                JOptionPane.showMessageDialog(this, "L·ªói: Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi m√£ n√†y ƒë·ªÉ c·∫≠p nh·∫≠t!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String maQL_cu = nvHienTai.getQuanLy().getMaQL();
            

            // 3. Create new object (throws IllegalArgumentException)
            NhanVien nvMoi = new NhanVien(maNV, hoTen, cccd, sdt, email, gioiTinh, ngaySinh, trangThai, new QuanLy(maQL_cu));

            // 4. Call DAO (throws SQLException)
            nhanVien_DAO.updateNhanVien(nvMoi);

            // 5. Success
            loadDataToTable();
            JOptionPane.showMessageDialog(this, "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);

        } catch (IllegalArgumentException e_val) {
            JOptionPane.showMessageDialog(this, e_val.getMessage(), "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e_sql) {
            handleSQLException(e_sql, maNV, cccd, null, "S·ª≠a");
        } catch (Exception e_all) {
            e_all.printStackTrace();
            JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Chi ti·∫øt: " + e_all.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Handles specific SQL exceptions related to constraints.
     */
    private void handleSQLException(SQLException e_sql, String maNV, String cccd, String maQL, String actionType) {
        String errorMessage = e_sql.getMessage();

        // Check for Primary Key (maNV) or Unique Key (CCCD, SƒêT, Email) violation
        if (errorMessage.contains("PRIMARY KEY constraint") || errorMessage.contains("UNIQUE KEY constraint")) {
            // Check for specific constraint violation
            if (errorMessage.contains("(" + maNV + ")")) { 
                JOptionPane.showMessageDialog(this, actionType + " th·∫•t b·∫°i: M√£ NV '" + maNV + "' ƒë√£ t·ªìn t·∫°i!", "L·ªói tr√πng M√£ NV", JOptionPane.ERROR_MESSAGE);
            } else if (errorMessage.contains("(" + cccd + ")")) { 
                JOptionPane.showMessageDialog(this, actionType + " th·∫•t b·∫°i: S·ªë CCCD '" + cccd + "' ƒë√£ t·ªìn t·∫°i!", "L·ªói tr√πng CCCD", JOptionPane.ERROR_MESSAGE);
            } else {
                // Other potential UNIQUE/PK constraint violation (e.g., duplicate phone number, email)
                JOptionPane.showMessageDialog(this, actionType + " th·∫•t b·∫°i: D·ªØ li·ªáu nh·∫≠p v√†o b·ªã tr√πng l·∫∑p (CCCD, SƒêT, ho·∫∑c Email).", "L·ªói tr√πng l·∫∑p", JOptionPane.ERROR_MESSAGE);
            }
        }
        // Check for Foreign Key (maQL) violation
        else if (errorMessage.contains("FOREIGN KEY constraint") && actionType.equals("Th√™m") && maQL != null) {
             JOptionPane.showMessageDialog(this, actionType + " th·∫•t b·∫°i: M√£ Qu·∫£n L√Ω '" + maQL + "' kh√¥ng t·ªìn t·∫°i!", "L·ªói M√£ Qu·∫£n L√Ω", JOptionPane.ERROR_MESSAGE);
        }
        // Handle other SQL errors (print stack trace for debugging)
        else {
            e_sql.printStackTrace(); 
            JOptionPane.showMessageDialog(this, "L·ªói CSDL kh√¥ng x√°c ƒë·ªãnh khi " + actionType.toLowerCase() + ". Chi ti·∫øt: " + errorMessage, "L·ªói CSDL", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSelectedRow() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            txtEmployeeId.setText(tableModel.getValueAt(selectedRow, 0).toString());
            txtName.setText(tableModel.getValueAt(selectedRow, 1).toString());

            try {
                String dateString = tableModel.getValueAt(selectedRow, 2).toString();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date birthDate = sdf.parse(dateString);
                dateChooserBirthDate.setDate(birthDate);
            } catch (ParseException e) {
                dateChooserBirthDate.setDate(null);
            }

            txtIdNumber.setText(tableModel.getValueAt(selectedRow, 3).toString());
            txtPhone.setText(tableModel.getValueAt(selectedRow, 4).toString());
            
            // Fix: Check for exact string match for gender
            String gender = tableModel.getValueAt(selectedRow, 5).toString();
            if (gender.equals("Nam")) rbMale.setSelected(true);
            else if (gender.equals("N·ªØ")) rbFemale.setSelected(true);
            
            txtEmail.setText(tableModel.getValueAt(selectedRow, 6).toString());

            String status = tableModel.getValueAt(selectedRow, 7).toString();
            cbStatus.setSelectedItem(status);
        }
    }

    private void searchEmployee() {
        String maTimKiem = txtSearch.getText().trim();

        if (maTimKiem.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Vui l√≤ng nh·∫≠p M√£ Nh√¢n Vi√™n ho·∫∑c T√™n c·∫ßn t√¨m.",
                "Ch∆∞a nh·∫≠p m√£",
                JOptionPane.WARNING_MESSAGE);
            loadDataToTable();
            return;
        }

        // D√πng findNhanVien ƒë·ªÉ t√¨m ki·∫øm g·∫ßn ƒë√∫ng (MaNV OR HoTen)
        List<NhanVien> dsKetQua = nhanVien_DAO.findNhanVien(maTimKiem); 

        tableModel.setRowCount(0);

        if (dsKetQua.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o c√≥ m√£/t√™n: '" + maTimKiem + "'.",
                "Kh√¥ng t√¨m th·∫•y",
                JOptionPane.INFORMATION_MESSAGE);

            loadDataToTable(); 
        }
        else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            
            for (NhanVien nv : dsKetQua) {
                // üí° FIX: (Gi·ªëng loadDataToTable) false=Nam, true=N·ªØ
                String gioiTinhStr = (nv.getGioiTinh() != null && nv.getGioiTinh()) ? "N·ªØ" : "Nam";
                String ngaySinhStr = (nv.getNgaySinh() != null) ? sdf.format(nv.getNgaySinh()) : "";

                tableModel.addRow(new Object[]{
                    nv.getMaNV(),
                    nv.getHoTen(),
                    ngaySinhStr,
                    nv.getCCCD(),
                    nv.getSoDienThoai(),
                    gioiTinhStr,
                    nv.getEmail(),
                    nv.getTrangThai()
                });
            }
            
            JOptionPane.showMessageDialog(this,
                "ƒê√£ t√¨m th·∫•y " + dsKetQua.size() + " k·∫øt qu·∫£.",
                "T√¨m th·∫•y",
                JOptionPane.INFORMATION_MESSAGE);

            table.setRowSelectionInterval(0, 0);
            loadSelectedRow();
        }
    }
    
    // ... (clearForm and main methods) ...
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Qu·∫£n l√Ω nh√¢n vi√™n");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            NhanVien_GUI panel = new NhanVien_GUI();
            frame.add(panel);
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.setVisible(true);
        });
    }
}