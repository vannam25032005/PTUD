	package gui;
	
	import javax.swing.*;
	import javax.swing.border.*;
	import javax.swing.table.DefaultTableModel;
	import java.awt.*;
	import java.awt.event.*;
	import java.sql.SQLException;
	import java.time.format.DateTimeFormatter;
	import java.util.ArrayList;
	
	import com.toedter.calendar.JDateChooser;
	import entity.Ban;
	import entity.BanDat;
	import entity.KhachHang;
	import dao.Ban_DAO; 
	import dao.BanDat_DAO;
	import connectDB.ConnectDB;
	
	import java.text.DecimalFormat;
	import java.text.SimpleDateFormat;
	import java.util.Date;
	import java.time.LocalDate;
	import java.time.LocalTime;
	import java.time.ZoneId;
	import java.util.stream.Collectors;
	
	public class DanhSachBanDat_GUI extends JPanel {
	    
	    private JTextField txtMaDatBan, txtTenKhachHang, txtSoDienThoai, txtSoNguoi, txtTienCoc, txtMaBan; 
	    private JDateChooser dcNgayDat;
	    private JTextField txtGioDat; 
	    private JComboBox<String> cboTrangThaiLoc;
	    private JTextArea txtGhiChu;
	    
	    private JTable tableDatBan; 
	    private DefaultTableModel modelDatBan; 

	    private JTextField txtTimKiem;
	    private JButton btnTimKiem, btnXoaBoLoc;
	    
	    private JButton  btnHuyDat, btnCheckIn; 
	    
	    private Ban_DAO banDAO = new Ban_DAO();
	    private BanDat_DAO banDatDAO = new BanDat_DAO();
	
	    private DecimalFormat currencyFormat = new DecimalFormat("#,###");
	    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
	    
	    private ArrayList<BanDat> danhSachTatCaDatBan = new ArrayList<>();
	
	    public DanhSachBanDat_GUI() {
	      
	        setLayout(new BorderLayout(15, 15));
	        setBackground(new Color(255, 239, 213));
	        setBorder(new EmptyBorder(20, 20, 20, 20));
	        
	        // Title
	        JLabel lblTitle = new JLabel("Qu·∫£n L√Ω Danh S√°ch B√†n ƒê√£ ƒê·∫∑t", SwingConstants.CENTER);
	        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 36));
	        lblTitle.setBorder(new EmptyBorder(0, 0, 15, 0));
	        add(lblTitle, BorderLayout.NORTH);
	        
	        // Main content
	        JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
	        mainPanel.setOpaque(false);
	        
	        // Left panel - Danh s√°ch ƒë·∫∑t b√†n
	        JPanel leftPanel = createDatBanTablePanel();
	        
	        // Right panel - Form chi ti·∫øt v√† h√†nh ƒë·ªông
	        JPanel rightPanel = createDetailActionPanel();
	        
	        // Split pane
	JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, rightPanel);
	        splitPane.setDividerLocation(800);
	        splitPane.setOpaque(false);
	        
	        mainPanel.add(splitPane, BorderLayout.CENTER);
	        add(mainPanel, BorderLayout.CENTER);
	        
	        
	        loadAllDataAndFilter(); 
	        lamMoiForm();
	
	        addEventListeners();
	    }
	    
	    // ================== PH·∫¶N THI·∫æT K·∫æ GUI ==================
	
	    private JPanel createDatBanTablePanel() {
	        // ... (Gi·ªØ nguy√™n ph·∫ßn thi·∫øt k·∫ø B·∫£ng, Search, Filter)
	        JPanel panel = new JPanel(new BorderLayout(10, 10));
	        panel.setOpaque(false);
	        panel.setBorder(new TitledBorder(
	            BorderFactory.createLineBorder(new Color(200, 200, 200)),
	            "Danh S√°ch ƒê·∫∑t B√†n",
	            TitledBorder.LEFT,
	            TitledBorder.TOP,
	            new Font("Segoe UI", Font.BOLD, 14)
	        ));
	        
	        // Search and Filter Panel
	        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
	        searchPanel.setOpaque(false);
	        
	        txtTimKiem = createTextField();
	        txtTimKiem.setPreferredSize(new Dimension(200, 30));
	        txtTimKiem.setToolTipText("T√¨m theo M√£ ƒë·∫∑t, SƒêT, ho·∫∑c T√™n KH");
	        btnTimKiem = createButton("üîç T√¨m", new Color(33, 150, 243), 80);
	        JLabel lblTrangThai = new JLabel("Tr·∫°ng th√°i:");
	        cboTrangThaiLoc = new JComboBox<>(new String[]{"Ho·∫°t ƒë·ªông (Ch·ªù/ƒê√£ XN)", "Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n", "T·∫•t c·∫£ (Bao g·ªìm H·ªßy/Ho√†n th√†nh)"}); 
	        cboTrangThaiLoc.setPreferredSize(new Dimension(220, 30));
	        
	        btnXoaBoLoc = createButton("üóëÔ∏è X√≥a l·ªçc", new Color(244, 67, 54), 100);
	        
	        searchPanel.add(new JLabel("T√¨m ki·∫øm:"));
	        searchPanel.add(txtTimKiem);
	        searchPanel.add(btnTimKiem);
	        searchPanel.add(lblTrangThai);
	        searchPanel.add(cboTrangThaiLoc);
	        searchPanel.add(btnXoaBoLoc);
	        
	        panel.add(searchPanel, BorderLayout.NORTH);
	        
	        // B·∫£ng danh s√°ch ƒë·∫∑t b√†n
	        String[] columnsDatBan = {"M√£ ƒë·∫∑t", "T√™n KH", "SƒêT", "B√†n", "Ng√†y ƒë·∫∑t", "Gi·ªù ƒë·∫∑t", "Ti·ªÅn c·ªçc", "Tr·∫°ng th√°i"};
	        modelDatBan = new DefaultTableModel(columnsDatBan, 0) {
	            @Override
	            public boolean isCellEditable(int row, int column) {
	                return false;
	            }
	        };
	        
	        tableDatBan = new JTable(modelDatBan);
	        tableDatBan.setFont(new Font("Segoe UI", Font.PLAIN, 12));
	        tableDatBan.setRowHeight(30);
	        tableDatBan.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
	        tableDatBan.getTableHeader().setBackground(new Color(240, 240, 240));
	        tableDatBan.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	        
	        // M√†u s·∫Øc cho tr·∫°ng th√°i trong b·∫£ng (Gi·ªØ nguy√™n)
	        tableDatBan.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
	        });
	        
	        JScrollPane scrollDatBan = new JScrollPane(tableDatBan);
	        panel.add(scrollDatBan, BorderLayout.CENTER);
	        
	        return panel;
	    }
	    
	    private JPanel createDetailActionPanel() {
	        JPanel panel = new JPanel();
	        panel.setLayout(new GridBagLayout());
	        panel.setBackground(Color.WHITE);
	        panel.setBorder(BorderFactory.createCompoundBorder(
	            BorderFactory.createTitledBorder(
	                BorderFactory.createLineBorder(new Color(200, 200, 200)),
	                "Chi Ti·∫øt & H√†nh ƒê·ªông",
	                TitledBorder.LEFT,
	                TitledBorder.TOP,
	                new Font("Segoe UI", Font.BOLD, 14)
	            ),
	            new EmptyBorder(10, 20, 20, 20)
	        ));
	        
	        GridBagConstraints gbc = new GridBagConstraints();
	        gbc.fill = GridBagConstraints.HORIZONTAL;
	        gbc.insets = new Insets(8, 10, 8, 10);
	        
	        // Form fields (Gi·ªØ nguy√™n)
	        txtMaDatBan = createTextField(); txtMaDatBan.setEditable(false); txtMaDatBan.setBackground(new Color(240, 240, 240));
	txtMaBan = createTextField(); txtMaBan.setEditable(false); txtMaBan.setBackground(new Color(240, 240, 240));
	        txtTenKhachHang = createTextField(); txtTenKhachHang.setEditable(false);
	        txtSoDienThoai = createTextField(); txtSoDienThoai.setEditable(false);
	        txtSoNguoi = createTextField(); txtSoNguoi.setEditable(false);
	        txtTienCoc = createTextField(); txtTienCoc.setEditable(false);
	        txtGioDat = createTextField(); txtGioDat.setEditable(false);
	        
	        dcNgayDat = new JDateChooser(); dcNgayDat.setDateFormatString("dd/MM/yyyy"); dcNgayDat.setEnabled(false);
	        
	        txtGhiChu = new JTextArea(3, 20);
	        txtGhiChu.setEditable(false);
	        txtGhiChu.setBorder(BorderFactory.createCompoundBorder(
	            BorderFactory.createLineBorder(Color.LIGHT_GRAY),
	            BorderFactory.createEmptyBorder(5, 5, 5, 5)
	        ));
	        txtGhiChu.setFont(new Font("Segoe UI", Font.PLAIN, 13));
	        txtGhiChu.setLineWrap(true);
	        txtGhiChu.setWrapStyleWord(true);
	        JScrollPane scrollGhiChu = new JScrollPane(txtGhiChu);
	        scrollGhiChu.setPreferredSize(new Dimension(250, 70));

	        gbc.gridx = 0; gbc.gridy = 0; gbc.weightx = 1.0;
	        panel.add(createFieldPanel("M√£ ƒë·∫∑t b√†n", txtMaDatBan), gbc);
	        gbc.gridy = 1;
	        panel.add(createFieldPanel("M√£ B√†n", txtMaBan), gbc);
	        gbc.gridy = 2;
	        panel.add(createFieldPanel("T√™n kh√°ch h√†ng", txtTenKhachHang), gbc);
	        gbc.gridy = 3;
	        panel.add(createFieldPanel("S·ªë ƒëi·ªán tho·∫°i", txtSoDienThoai), gbc);
	        gbc.gridy = 4;
	        panel.add(createFieldPanel("S·ªë ng∆∞·ªùi", txtSoNguoi), gbc);
	        gbc.gridy = 5;
	        panel.add(createFieldPanel("Ng√†y ƒë·∫∑t", dcNgayDat), gbc);
	        gbc.gridy = 6;
	        panel.add(createFieldPanel("Gi·ªù ƒë·∫∑t", txtGioDat), gbc);
	        gbc.gridy = 7;
	        panel.add(createFieldPanel("Ti·ªÅn c·ªçc (VNƒê)", txtTienCoc), gbc);
	        gbc.gridy = 8;
	        panel.add(createFieldPanel("Ghi ch√∫", scrollGhiChu), gbc);
	        
	        gbc.gridy = 9; gbc.insets = new Insets(20, 10, 8, 10);
	        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
	        buttonPanel.setOpaque(false);
	        
	        btnCheckIn = createButton("Check-in", new Color(255, 152, 0), 120);
	        btnHuyDat = createButton("H·ªßy ƒë·∫∑t", new Color(244, 67, 54), 100);
	        
	        buttonPanel.add(btnCheckIn);
	        buttonPanel.add(btnHuyDat);
	        
	        panel.add(buttonPanel, gbc);
	return panel;
	    }
	    
	    // Ph∆∞∆°ng th·ª©c t·∫°o FieldPanel, TextField, Button 
	    private JPanel createFieldPanel(String label, JComponent component) {
	        JPanel panel = new JPanel(new BorderLayout(5, 5));
	        panel.setOpaque(false);
	        JLabel lbl = new JLabel(label);
	        lbl.setFont(new Font("Segoe UI", Font.PLAIN, 12));
	        lbl.setForeground(new Color(80, 80, 80));
	        panel.add(lbl, BorderLayout.NORTH);
	        panel.add(component, BorderLayout.CENTER);
	        return panel;
	    }
	    private JTextField createTextField() {
	        JTextField textField = new JTextField();
	        textField.setPreferredSize(new Dimension(200, 35));
	        textField.setFont(new Font("Segoe UI", Font.PLAIN, 13));
	        textField.setBorder(BorderFactory.createCompoundBorder(
	            BorderFactory.createLineBorder(new Color(200, 200, 200)),
	            BorderFactory.createEmptyBorder(5, 10, 5, 10)
	        ));
	        return textField;
	    }
	    private JButton createButton(String text, Color bgColor, int width) {
	        JButton button = new JButton(text);
	        button.setPreferredSize(new Dimension(width, 40));
	        button.setFont(new Font("Segoe UI", Font.BOLD, 13));
	        button.setBackground(bgColor);
	        button.setForeground(Color.WHITE);
	        button.setFocusPainted(false);
	        button.setBorderPainted(false);
	        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
	        button.addMouseListener(new MouseAdapter() {
	            public void mouseEntered(MouseEvent e) {
	                button.setBackground(bgColor.darker());
	            }
	            public void mouseExited(MouseEvent e) {
	                button.setBackground(bgColor);
	            }
	        });
	        return button;
	    }
	    
	    // ================== PH·∫¶N T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU CSDL ==================
	
	    private void loadAllDataAndFilter() {
	        danhSachTatCaDatBan = banDatDAO.getAllBanDat();
	        timKiemVaLoc(); 
	    }
	    
	    /**
	     * T·∫£i d·ªØ li·ªáu ƒë√£ l·ªçc l√™n b·∫£ng JTable
	     */
	    private void loadDatBanTable(ArrayList<BanDat> dsDatBan) {
	        modelDatBan.setRowCount(0);
	        for (BanDat bd : dsDatBan) {
	            modelDatBan.addRow(new Object[]{
	                bd.getMaDatBan(),
	                bd.getKhachHang().getHoTenKH(),
	                bd.getKhachHang().getSoDienThoai(),
	                bd.getBan().getMaBan(),
	                bd.getNgayDat().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
	                bd.getGioDat().format(timeFormatter),
	                currencyFormat.format(bd.getTienCoc()),
	bd.getTrangThai()
	            });
	        }
	    }
	    
	    /**
	     * Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n v·∫≠t l√Ω
	     */
	    private void capNhatTrangThaiBan(String maBan, String trangThaiMoi) {
	        if (!banDAO.updateTrangThaiBan(maBan, trangThaiMoi)) {
	            JOptionPane.showMessageDialog(this, "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n v·∫≠t l√Ω trong CSDL.", "L·ªói", JOptionPane.ERROR_MESSAGE);
	        }
	    }
	
	    // ================== PH·∫¶N X·ª¨ L√ù S·ª∞ KI·ªÜN LOGIC CSDL ==================
	    private void addEventListeners() {
	        // Click ch·ªçn ƒë·∫∑t b√†n -> Hi·ªÉn th·ªã chi ti·∫øt
	        tableDatBan.addMouseListener(new MouseAdapter() {
	            public void mouseClicked(MouseEvent e) {
	                int row = tableDatBan.getSelectedRow();
	                if (row >= 0) {
	                    hienThiThongTinDatBan(row);
	                }
	            }
	        });
	
	        // N√∫t Check-in
	        btnCheckIn.addActionListener(e -> checkInDatBan());
	        // N√∫t H·ªßy ƒë·∫∑t
	        btnHuyDat.addActionListener(e -> huyDatBan());
	        
	        
	        // T√¨m ki·∫øm v√† L·ªçc
	        btnTimKiem.addActionListener(e -> timKiemVaLoc());
	        txtTimKiem.addActionListener(e -> timKiemVaLoc());
	        cboTrangThaiLoc.addActionListener(e -> timKiemVaLoc());
	        btnXoaBoLoc.addActionListener(e -> {
	            txtTimKiem.setText("");
	            cboTrangThaiLoc.setSelectedIndex(0);
	            timKiemVaLoc();
	        });
	    }
	
	    // ================== PH·∫¶N LOGIC X·ª¨ L√ù ==================
	
	    private void hienThiThongTinDatBan(int row) {
	        if (row < 0) return;
	        
	        try {
	            String maDatBan = (String) modelDatBan.getValueAt(row, 0);
	            BanDat bd = banDatDAO.getBanDatById(maDatBan); 
	
	            if (bd != null) {
	                txtMaDatBan.setText(bd.getMaDatBan());
	                txtMaBan.setText(bd.getBan().getMaBan());
	                txtTenKhachHang.setText(bd.getKhachHang().getHoTenKH());
	                txtSoDienThoai.setText(bd.getKhachHang().getSoDienThoai());
	                txtSoNguoi.setText(String.valueOf(bd.getSoLuongKhach())); 
	                txtTienCoc.setText(currencyFormat.format(bd.getTienCoc()));
	                
	                Date ngayDatDate = Date.from(bd.getNgayDat().atStartOfDay(ZoneId.systemDefault()).toInstant());
	                dcNgayDat.setDate(ngayDatDate);
	txtGioDat.setText(bd.getGioDat().format(timeFormatter));
	                
	                txtGhiChu.setText(bd.getGhiChu());
	                
	                // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t theo tr·∫°ng th√°i ƒë·∫∑t b√†n
	                String trangThai = bd.getTrangThai();
	           
	                // Ch·ªâ cho ph√©p H·ªßy n·∫øu kh√¥ng ph·∫£i ƒë√£ "Ho√†n th√†nh" ho·∫∑c "ƒê√£ h·ªßy"
	                btnHuyDat.setEnabled(!"ƒê√£ h·ªßy".equals(trangThai));
	                
	                btnCheckIn.setEnabled( "ƒê√£ ƒë·∫∑t".equals(trangThai)); 
	
	            } else {
	                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t b√†n.", "L·ªói", JOptionPane.ERROR_MESSAGE);
	            }
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(this, "L·ªói t·∫£i chi ti·∫øt ƒë·∫∑t b√†n: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
	        }
	    }
	    
	    /**
	     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ƒë·∫∑t b√†n v√† tr·∫°ng th√°i b√†n v·∫≠t l√Ω.
	     * S·ª≠ d·ª•ng cho checkin v√† H·ªßy.
	     */
	    private void capNhatTrangThaiDatBan(String trangThaiMoi) {
	        String maDatBan = txtMaDatBan.getText().trim();
	        if (maDatBan.isEmpty()) {
	            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn m·ªôt m·ª•c ƒë·∫∑t b√†n ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!", "Ch∆∞a ch·ªçn", JOptionPane.WARNING_MESSAGE);
	            return;
	        }
	
	        BanDat banDat = banDatDAO.getBanDatById(maDatBan);
	        if (banDat == null) return;
	        
	        String trangThaiHienTai = banDat.getTrangThai();
	        if (trangThaiHienTai.equals(trangThaiMoi)) {
	            JOptionPane.showMessageDialog(this, "ƒê·∫∑t b√†n n√†y ƒë√£ ·ªü tr·∫°ng th√°i \"" + trangThaiMoi + "\" r·ªìi!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
	            return;
	        }
	
	        String maBan = banDat.getBan().getMaBan();
	        banDat.setTrangThai(trangThaiMoi);
	
	        if (banDatDAO.updateBanDat(banDat)) {
	            if (trangThaiMoi.equals("ƒê√£ x√°c nh·∫≠n")) {
	                capNhatTrangThaiBan(maBan, "ƒê√£ ƒë·∫∑t"); 
	            } else if (trangThaiMoi.equals("ƒê√£ h·ªßy")) {
	                capNhatTrangThaiBan(maBan, "Tr·ªëng"); 
	            }
	            
	            JOptionPane.showMessageDialog(this,
	                "ƒê√£ chuy·ªÉn tr·∫°ng th√°i ƒê·∫∂T B√ÄN sang: " + trangThaiMoi, 
	                "Th√†nh c√¥ng", 
	                JOptionPane.INFORMATION_MESSAGE);
	            
	            loadAllDataAndFilter();
	            lamMoiForm();
	            
	            // ‚ú® TH√äM D√íNG N√ÄY - Th√¥ng b√°o cho BanDat_GUI refresh
	            if (refreshListener != null) {
	                refreshListener.onDataChanged();
	            }
	            
	        } else {
	            JOptionPane.showMessageDialog(this, "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n.", "L·ªói", JOptionPane.ERROR_MESSAGE);
	        }
	    }
	    
	    private void huyDatBan() {
	        String maDatBan = txtMaDatBan.getText().trim();
	         if (maDatBan.isEmpty()) {
	            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn m·ªôt m·ª•c ƒë·∫∑t b√†n ƒë·ªÉ h·ªßy!", "Ch∆∞a ch·ªçn", JOptionPane.WARNING_MESSAGE);
	            return;
	        }
	        
	        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën H·ª¶Y ƒë·∫∑t b√†n n√†y? (B√†n s·∫Ω ƒë∆∞·ª£c gi·∫£i ph√≥ng)", "X√°c nh·∫≠n h·ªßy", JOptionPane.YES_NO_OPTION);
	        
	        if (confirm == JOptionPane.YES_OPTION) {
	            capNhatTrangThaiDatBan("ƒê√£ h·ªßy");
	        }
	    }
	    
	    /**
	     * X·ª≠ l√Ω nghi·ªáp v·ª• Check-in: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n v√† chuy·ªÉn sang G·ªçi M√≥n.
	     */
	    private void checkInDatBan() {
	        String maDatBan = txtMaDatBan.getText().trim();
	        if (maDatBan.isEmpty()) {
	            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn m·ªôt m·ª•c ƒë·∫∑t b√†n ƒë·ªÉ Check-in!", "Ch∆∞a ch·ªçn", JOptionPane.WARNING_MESSAGE);
	            return;
	        }
	        
	        BanDat banDat = banDatDAO.getBanDatById(maDatBan);
	        if (banDat == null) return;
	        String maBan = banDat.getBan().getMaBan();
	        String trangThaiHienTai = banDat.getTrangThai();
	
	        int confirm = JOptionPane.showConfirmDialog(this, 
	            "X√°c nh·∫≠n Check-in cho ƒë∆°n: " + maDatBan + " (B√†n " + maBan + " s·∫Ω chuy·ªÉn sang 'ƒêang s·ª≠ d·ª•ng')", 
	            "X√°c nh·∫≠n Check-in", 
	            JOptionPane.YES_NO_OPTION);
	
	        if (confirm != JOptionPane.YES_OPTION) {
	            return;
	        }
	
	        banDat.setTrangThai("Ho√†n th√†nh");
	        if (!banDatDAO.updateBanDat(banDat)) {
	            JOptionPane.showMessageDialog(this, "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n sang 'Ho√†n th√†nh'.", "L·ªói CSDL", JOptionPane.ERROR_MESSAGE);
	            return;
	        }
	
	        capNhatTrangThaiBan(maBan, "ƒêang s·ª≠ d·ª•ng");
	        loadAllDataAndFilter();
	        lamMoiForm();
	       
	        if (refreshListener != null) {
	            refreshListener.onDataChanged();
	        }
	        
	        JOptionPane.showMessageDialog(this, "Check-in th√†nh c√¥ng. B√†n " + maBan + " ƒëang s·ª≠ d·ª•ng.", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
	    }
	
	    private void timKiemVaLoc() {
	        String tuKhoa = txtTimKiem.getText().trim().toLowerCase();
	        String trangThaiLoc = (String) cboTrangThaiLoc.getSelectedItem();
	        
	        // L·∫•y danh s√°ch ƒëang ho·∫°t ƒë·ªông (Ch·ªù/ƒê√£ XN) n·∫øu ch·ªçn m·∫∑c ƒë·ªãnh
	        ArrayList<BanDat> dsLoc = new ArrayList<>(danhSachTatCaDatBan);
	        
	        // L·ªçc theo tr·∫°ng th√°i
	        if (trangThaiLoc.equals("Ho·∫°t ƒë·ªông (Ch·ªù/ƒê√£ XN)")) {
	            dsLoc = (ArrayList<BanDat>) dsLoc.stream()
	                .filter(bd -> bd.getTrangThai().equals("ƒê√£ ƒë·∫∑t") || bd.getTrangThai().equals("ƒê√£ x√°c nh·∫≠n"))
	                .collect(Collectors.toList());
	        } else if (!trangThaiLoc.equals("T·∫•t c·∫£ (Bao g·ªìm H·ªßy/Ho√†n th√†nh)")) {
	            // L·ªçc theo tr·∫°ng th√°i c·ª• th·ªÉ (Ch·ªù XN ho·∫∑c ƒê√£ XN)
	            dsLoc = (ArrayList<BanDat>) dsLoc.stream()
	                .filter(bd -> bd.getTrangThai().equals(trangThaiLoc))
	                .collect(Collectors.toList());
	        } 
	        // L·ªçc theo t·ª´ kh√≥a (M√£ ƒë·∫∑t, SƒêT, T√™n KH)
	        if (!tuKhoa.isEmpty()) {
	            dsLoc = (ArrayList<BanDat>) dsLoc.stream()
	                .filter(bd -> bd.getMaDatBan().toLowerCase().contains(tuKhoa) ||
	                             bd.getKhachHang().getSoDienThoai().toLowerCase().contains(tuKhoa) || 
	                             bd.getKhachHang().getHoTenKH().toLowerCase().contains(tuKhoa))
	                .collect(Collectors.toList());
	        }
	        
	        loadDatBanTable(dsLoc);
	        lamMoiForm();
	    }
	    
	    private void lamMoiForm() {
	        txtMaDatBan.setText("");
	        txtMaBan.setText("");
	        txtTenKhachHang.setText("");
	        txtSoDienThoai.setText("");
	        txtSoNguoi.setText("");
	        txtTienCoc.setText("");
	        dcNgayDat.setDate(null);
	        txtGioDat.setText("");
	        txtGhiChu.setText("");
	        tableDatBan.clearSelection();
	        
	   ;
	        btnHuyDat.setEnabled(false);
	        btnCheckIn.setEnabled(false);
	    }
	    private DataRefreshListener refreshListener;
	    
	    public void setDataRefreshListener(DataRefreshListener listener) {
	        this.refreshListener = listener;
	    }
	    
	    public void refreshData() {
	        loadAllDataAndFilter();
	    }
	    
	    // ================== MAIN (V√≠ d·ª•) ==================
//	     public static void main(String[] args) throws SQLException {
//	          ConnectDB.getInstance().connect();
//	         SwingUtilities.invokeLater(() -> {
//	             JFrame frame = new JFrame("Qu·∫£n L√Ω Danh S√°ch ƒê·∫∑t B√†n");
//	             frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//	             frame.setSize(1200, 800);
//	             frame.add(new DanhSachBanDat_GUI());
//	             frame.setLocationRelativeTo(null);
//	             frame.setVisible(true);
//	         });
//	     }
	}
