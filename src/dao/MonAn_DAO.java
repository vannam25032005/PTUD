package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import entity.MonAn;
import entity.QuanLy; // ƒê√£ th√™m
import connectDB.ConnectDB;

public class MonAn_DAO {
    
    
    
   
    private MonAn createMonAnFromResultSet(ResultSet rs) throws SQLException {
        String maQL = rs.getString("maQL");
        QuanLy quanLy = null;
        
        if (maQL != null && !maQL.trim().isEmpty()) {
            quanLy = new QuanLy(maQL);
        }
        return new MonAn(
            rs.getString("maMon"),
            rs.getString("tenMon"),
            rs.getString("loaiMon"),
            rs.getDouble("giaMon"),
            rs.getString("hinhAnh"),
            quanLy 
        );
    }

    

   
    public List<MonAn> docTuBang() {
        List<MonAn> dsMon = new ArrayList<>();
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN";
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            
            while (rs.next()) {
                dsMon.add(createMonAnFromResultSet(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dsMon;
    }

    
    // H√äM M√ìN ƒÇN
   
    public boolean themMonAn(MonAn mon) {
        String sql = "INSERT INTO MONAN(maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL) VALUES (?, ?, ?, ?, ?, ?)";
        

        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
        
            ps.setString(1, mon.getMaMonAn());
            ps.setString(2, mon.getTenMonAn());
            ps.setString(3, mon.getLoaiMonAn());
            ps.setDouble(4, mon.getGiaMonAn());
            ps.setString(5, mon.getHinhAnh());
            QuanLy ql = mon.getQuanLy();
            if (ql != null && ql.getMaQL() != null && !ql.getMaQL().trim().isEmpty())
                ps.setString(6, ql.getMaQL());
            else
                ps.setNull(6, Types.NVARCHAR); // Cho ph√©p NULL
                
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    public String generateNewMaMon() {
        String newMa = "MA001"; // M√£ m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ m√≥n n√†o
        String sql = "SELECT TOP 1 maMon FROM MONAN ORDER BY maMon DESC"; 

        try (Connection con = ConnectDB.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            
            if (rs.next()) {
                String lastMa = rs.getString("maMon");
                
               
                String numStr = lastMa.substring(2); 
                int lastNum = Integer.parseInt(numStr);         
                int newNum = lastNum + 1;
                newMa = String.format("MA%03d", newNum); 
            }
        } catch (SQLException e) {
            System.err.println("L·ªói SQL khi ph√°t sinh m√£ m√≥n ƒÉn m·ªõi: " + e.getMessage());
            e.printStackTrace();
           
            return "ERROR";
        } catch (NumberFormatException e) {
     
             System.err.println("L·ªói ƒë·ªãnh d·∫°ng m√£ m√≥n ƒÉn trong CSDL: " + e.getMessage());
             return "MA001"; 
        }
        return newMa;
    }

   
    public boolean chinhSuaMonAn(MonAn mon) {
        String sql = "UPDATE MONAN SET tenMon=?, loaiMon=?, giaMon=?, hinhAnh=?, maQL=? WHERE maMon=?";
        
        // S·ª¨A L·ªñI: S·ª≠ d·ª•ng try-with-resources
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            ps.setString(1, mon.getTenMonAn());
            ps.setString(2, mon.getLoaiMonAn());
            ps.setDouble(3, mon.getGiaMonAn());
            ps.setString(4, mon.getHinhAnh());
            
            // X·ª¨ L√ù QUANLY
            QuanLy ql = mon.getQuanLy();
            if (ql != null && ql.getMaQL() != null && !ql.getMaQL().trim().isEmpty())
                ps.setString(5, ql.getMaQL());
            else
                ps.setNull(5, Types.NVARCHAR);
                
            ps.setString(6, mon.getMaMonAn());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

  
    public List<MonAn> timTheoTen(String tenMon) {
        List<MonAn> ds = new ArrayList<>();
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN WHERE tenMon LIKE ?";
        
       
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            ps.setString(1, "%" + tenMon + "%");
            
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    ds.add(createMonAnFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ds;
    }
    public boolean xoaMonAn(String maMon) {
        // Truy v·∫•n SQL ƒë·ªÉ x√≥a m√≥n ƒÉn
        String sql = "DELETE FROM MONAN WHERE maMon = ?";
        
        // S·ª≠ d·ª•ng try-with-resources ƒë·ªÉ ƒë·∫£m b·∫£o Connection v√† PreparedStatement ƒë∆∞·ª£c ƒë√≥ng
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            ps.setString(1, maMon);
            
            // executeUpdate() tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng h√†ng b·ªã ·∫£nh h∆∞·ªüng
            return ps.executeUpdate() > 0;
            
        } catch (SQLException e) {
            System.err.println("L·ªói SQL khi x√≥a m√≥n ƒÉn (M√£: " + maMon + "):");
            e.printStackTrace();
            return false;
        }
    }
    
    // üß© H√†m ƒë√≥ng k·∫øt n·ªëi (Kh√¥ng c·∫ßn thi·∫øt n·∫øu d√πng try-with-resources, nh∆∞ng gi·ªØ l·∫°i n·∫øu c√°c ph∆∞∆°ng th·ª©c kh√°c v·∫´n d√πng)
    private void close(Connection con, PreparedStatement ps, ResultSet rs) {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    // ====================================================================
    // L·ªåC THEO LO·∫†I M√ìN
    // ====================================================================
    public List<MonAn> locTheoLoai(String loaiMon) {
        List<MonAn> dsMon = new ArrayList<>();
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN WHERE loaiMon = ?";

        // S·ª¨A L·ªñI: S·ª≠ d·ª•ng try-with-resources
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            ps.setString(1, loaiMon);
            
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    dsMon.add(createMonAnFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dsMon;
    }

    // ====================================================================
    // L·ªåC + S·∫ÆP X·∫æP THEO GI√Å
    // ====================================================================
    public ArrayList<MonAn> locTheoGia(String thuTu) {
        ArrayList<MonAn> dsMon = new ArrayList<>();
        String sortOrder = thuTu.equalsIgnoreCase("DESC") ? "DESC" : "ASC";
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN ORDER BY giaMon " + sortOrder;

        // S·ª¨A L·ªñI: S·ª≠ d·ª•ng try-with-resources
        try (Connection con = ConnectDB.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                dsMon.add(createMonAnFromResultSet(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dsMon;
    }

    // ====================================================================
    // L·ªåC K·∫æT H·ª¢P (THEO LO·∫†I + THEO GI√Å)
    // ====================================================================
    public ArrayList<MonAn> locMonAn(String loaiMon, String thuTu) {
        ArrayList<MonAn> dsMon = new ArrayList<>();
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN";
        
        boolean hasLoaiMonFilter = (loaiMon != null && !loaiMon.equals("T·∫•t c·∫£"));
        
        if (hasLoaiMonFilter) {
            sql += " WHERE loaiMon = ?";
        }
        String sortOrder = thuTu.equalsIgnoreCase("DESC") ? "DESC" : "ASC";
        sql += " ORDER BY giaMon " + sortOrder;

        // S·ª¨A L·ªñI: S·ª≠ d·ª•ng try-with-resources
        try (Connection con = ConnectDB.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            if (hasLoaiMonFilter) {
                ps.setString(1, loaiMon);
            }

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    dsMon.add(createMonAnFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dsMon;
    }
    
    // H√ÄM close() ƒê√É B·ªä X√ìA v√¨ try-with-resources ƒë√£ ƒë·∫£m b·∫£o vi·ªác ƒë√≥ng t√†i nguy√™n.
    public List<MonAn> layTatCaMonAn() throws SQLException {
        List<MonAn> danhSachMonAn = new ArrayList<>();
        Connection con = ConnectDB.getConnection(); 
        
        if (con == null) return danhSachMonAn; // Tr·∫£ v·ªÅ r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt n·ªëi
        
        // S·ª≠ d·ª•ng try-with-resources ƒë·ªÉ t·ª± ƒë·ªông ƒë√≥ng Statement v√† ResultSet
        try (Statement stmt = con.createStatement(); 
             ResultSet rs = stmt.executeQuery("SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN")) {

            while (rs.next()) {
                String maMon = rs.getString("maMon");
                String tenMon = rs.getString("tenMon");
                String loaiMon = rs.getString("loaiMon");
                double giaMon = rs.getDouble("giaMon"); 
                String hinhAnh = rs.getString("hinhAnh");
                String maQL = rs.getString("maQL");
                
                // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng QuanLy ch·ªâ v·ªõi m√£
                QuanLy quanLy = new QuanLy(maQL); 
                
                MonAn mon = new MonAn(maMon, tenMon, loaiMon, giaMon, hinhAnh, quanLy);
                danhSachMonAn.add(mon);
            }
        } catch (Exception e) {
            System.err.println("L·ªói truy v·∫•n d·ªØ li·ªáu M√≥n ƒÉn:");
            e.printStackTrace();
        } 
        return danhSachMonAn;
    }
    public List<String> layDanhSachLoaiMon() throws SQLException {
        List<String> dsLoai = new ArrayList<>();
        Connection con = ConnectDB.getConnection();
        
        if (con == null) return dsLoai;
        
        try (Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT DISTINCT loaiMon FROM MONAN")) {
            
            while(rs.next()) {
                dsLoai.add(rs.getString("loaiMon"));
            }
        } catch (Exception e) {
            System.err.println("L·ªói truy v·∫•n Lo·∫°i m√≥n:");
            e.printStackTrace();
        }
        return dsLoai;
    }
    public MonAn getMonAnById(String maMon) {
        MonAn monAn = null;
        Connection con = ConnectDB.getConnection();
        String sql = "SELECT maMon, tenMon, loaiMon, giaMon, hinhAnh, maQL FROM MONAN WHERE maMon = ?";
        
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maMon);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    monAn = createMonAnFromResultSet(rs);
                }
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi t√¨m m√≥n ƒÉn theo m√£: " + e.getMessage());
            e.printStackTrace();
        }
        return monAn;
    }
}