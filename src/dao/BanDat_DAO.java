package dao;

import connectDB.ConnectDB;
import entity.BanDat;
import entity.KhachHang; // Import KhachHang entity
import entity.Ban;       // Import Ban entity
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;

public class BanDat_DAO {

    // Kh·ªüi t·∫°o c√°c DAO ph·ª• thu·ªôc ƒë·ªÉ truy v·∫•n c√°c Entity li√™n quan
    private KhachHang_DAO khachHang_DAO = new KhachHang_DAO();
    private Ban_DAO ban_DAO = new Ban_DAO();

   
    private BanDat createBanDatFromResultSet(ResultSet rs) throws SQLException {
        // L·∫•y c√°c m√£ kh√≥a ngo·∫°i t·ª´ ResultSet
        String maKhachHang = rs.getString("maKH");
        String maBan = rs.getString("maBan");


        KhachHang khachHang = khachHang_DAO.timKhachHangTheoMa(maKhachHang); 
        Ban ban = ban_DAO.getBanById(maBan);

        // L·∫•y c√°c tr∆∞·ªùng th√¥ng th∆∞·ªùng
        String maDatBan = rs.getString("maDatBan");
        
        // Chuy·ªÉn ƒë·ªïi java.sql.Date v√† java.sql.Time sang java.time.LocalDate v√† LocalTime
        LocalDate ngayDat = rs.getDate("ngayDat").toLocalDate();
        LocalTime gioDat = rs.getTime("gioDat").toLocalTime();
        
        int soLuongKhach = rs.getInt("soLuongKhach");
        double tienCoc = rs.getDouble("tienCoc");
        String trangThai = rs.getString("trangThai");
        String ghiChu = rs.getString("ghiChu");

        // T·∫°o ƒë·ªëi t∆∞·ª£ng BanDat m·ªõi
        return new BanDat(maDatBan, khachHang, ban, ngayDat, gioDat, 
                          soLuongKhach, tienCoc, trangThai, ghiChu);
    }

    public ArrayList<BanDat> getAllBanDat() {
        ArrayList<BanDat> dsDatBan = new ArrayList<>();
        Connection con = ConnectDB.getConnection();
        // C·∫ßn SELECT c·∫£ m√£ KH v√† m√£ B√†n ƒë·ªÉ query ƒë·ªëi t∆∞·ª£ng
        String sql = "SELECT maDatBan, maKH, maBan, ngayDat, gioDat, soLuongKhach, tienCoc, trangThai, ghiChu FROM BANDAT";
        
        try (PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            
            while (rs.next()) {
                dsDatBan.add(createBanDatFromResultSet(rs));
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y t·∫•t c·∫£ ƒë·∫∑t b√†n: " + e.getMessage());
            e.printStackTrace();
        }
        return dsDatBan;
    }
    
    
    public BanDat getBanDatById(String maDatBan) {
        BanDat banDat = null;
        Connection con = ConnectDB.getConnection();
        String sql = "SELECT maDatBan, maKH, maBan, ngayDat, gioDat, soLuongKhach, tienCoc, trangThai, ghiChu FROM BANDAT WHERE maDatBan = ?";
        
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maDatBan);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    banDat = createBanDatFromResultSet(rs);
                }
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi t√¨m ƒë·∫∑t b√†n theo m√£: " + e.getMessage());
            e.printStackTrace();
        }
        return banDat;
    }

  
    public boolean addBanDat(BanDat banDat) throws Exception { 
        Connection con = ConnectDB.getConnection();
        String maBan = banDat.getBan().getMaBan();
        String trangthai = ban_DAO.getTrangThaiBan(maBan);

        LocalDate ngayHienTai = LocalDate.now();
        LocalTime gioHienTai = LocalTime.now();

        // ‚ö†Ô∏è Tr∆∞·ªùng h·ª£p 1: B√†n ƒëang s·ª≠ d·ª•ng
        if (trangthai.equals("ƒêang s·ª≠ d·ª•ng")) {
            LocalTime gioChoPhep = gioHienTai.plusHours(4); // ch·ªâ cho ph√©p ƒë·∫∑t sau 4 ti·∫øng
           
            if (banDat.getNgayDat().equals(ngayHienTai) && banDat.getGioDat().isBefore(gioChoPhep)) {
                throw new Exception("B√†n n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng ‚Äî ch·ªâ c√≥ th·ªÉ ƒë·∫∑t sau "
                                    + gioChoPhep.truncatedTo(java.time.temporal.ChronoUnit.MINUTES) + ".");
            }
        }

        // ‚ö†Ô∏è Tr∆∞·ªùng h·ª£p 2: B√†n tr·ªëng nh∆∞ng ƒë·∫∑t trong qu√° kh·ª© (v√≠ d·ª• b√¢y gi·ªù 10h m√† ƒë·∫∑t 9h)
        if (trangthai.equals("Tr·ªëng")) {
            if (banDat.getNgayDat().equals(ngayHienTai) && banDat.getGioDat().isBefore(gioHienTai)) {
                throw new Exception("Gi·ªù ƒë·∫∑t ph·∫£i sau th·ªùi ƒëi·ªÉm hi·ªán t·∫°i (" 
                                    + gioHienTai.truncatedTo(java.time.temporal.ChronoUnit.MINUTES) + ").");
            }
        }

        // ‚ö†Ô∏è Tr∆∞·ªùng h·ª£p 3: Ki·ªÉm tra xung ƒë·ªôt ƒë·∫∑t b√†n (¬±2 ti·∫øng)
        boolean xungDot = kiemTraXungDotDatBan(maBan, banDat.getNgayDat(), banDat.getGioDat());
        if (xungDot) {
            throw new Exception("B√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian ¬±2 ti·∫øng so v·ªõi gi·ªù b·∫°n ch·ªçn.");
        }

        // ‚öôÔ∏è Tr∆∞·ªùng h·ª£p 4: Th√™m m·ªõi ƒë·∫∑t b√†n
        String sql = "INSERT INTO BANDAT (maDatBan, maKH, maBan, ngayDat, gioDat, soLuongKhach, tienCoc, trangThai, ghiChu) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        int n = 0;

        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, banDat.getMaDatBan());
            ps.setString(2, banDat.getKhachHang().getMaKH()); 
            ps.setString(3, maBan); 
            ps.setDate(4, java.sql.Date.valueOf(banDat.getNgayDat()));
            ps.setTime(5, java.sql.Time.valueOf(banDat.getGioDat()));
            ps.setInt(6, banDat.getSoLuongKhach());
            ps.setDouble(7, banDat.getTienCoc());
            ps.setString(8, banDat.getTrangThai());
            ps.setString(9, banDat.getGhiChu());

            n = ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("L·ªói khi th√™m ƒë·∫∑t b√†n: " + e.getMessage());
            throw new SQLException("L·ªói CSDL khi th√™m ƒë·∫∑t b√†n: " + e.getMessage());
        }

        return n > 0;
    }


   
    public boolean updateBanDat(BanDat banDat) {
        Connection con = ConnectDB.getConnection();
        String sql = "UPDATE BANDAT SET maKH = ?, maBan = ?, ngayDat = ?, gioDat = ?, soLuongKhach = ?, tienCoc = ?, trangThai = ?, ghiChu = ? WHERE maDatBan = ?";
        int n = 0;
        
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, banDat.getKhachHang().getMaKH());
            ps.setString(2, banDat.getBan().getMaBan());
            
            ps.setDate(3, Date.valueOf(banDat.getNgayDat()));
            ps.setTime(4, Time.valueOf(banDat.getGioDat()));
            
            ps.setInt(5, banDat.getSoLuongKhach());
            ps.setDouble(6, banDat.getTienCoc());
            ps.setString(7, banDat.getTrangThai());
            ps.setString(8, banDat.getGhiChu());
            ps.setString(9, banDat.getMaDatBan()); // WHERE clause
            
            n = ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t ƒë·∫∑t b√†n: " + e.getMessage());
            e.printStackTrace();
        }
        return n > 0;
    }

    
    public boolean deleteBanDat(String maDatBan) {
        Connection con = ConnectDB.getConnection();
        String sql = "DELETE FROM BANDAT WHERE maDatBan = ?";
        int n = 0;
        
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maDatBan);
            n = ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("L·ªói khi x√≥a ƒë·∫∑t b√†n: " + e.getMessage());
            e.printStackTrace();
        }
        return n > 0;
    }

   
 // Trong l·ªõp dao.BanDat_DAO

    public ArrayList<BanDat> searchBanDat(String keyword, String trangThaiLoc) {
        ArrayList<BanDat> dsDatBan = new ArrayList<>();
        Connection con = ConnectDB.getConnection();
        
        // C·∫ßn JOIN v·ªõi b·∫£ng KhachHang ƒë·ªÉ t√¨m ki·∫øm theo T√™n KH ho·∫∑c SƒêT
        StringBuilder sql = new StringBuilder("SELECT BD.* FROM BANDAT BD JOIN KHACHHANG KH ON BD.maKH = KH.maKH WHERE 1=1");
        
        if (keyword != null && !keyword.trim().isEmpty()) {
            // üí° S·ª¨A L·ªñI: ƒê·ªïi KH.tenKH th√†nh KH.hoTenKH v√† KH.sdt th√†nh KH.soDienThoai
            sql.append(" AND (BD.maDatBan LIKE ? OR KH.hoTenKH LIKE ? OR KH.soDienThoai LIKE ? OR BD.maBan LIKE ?)");
        }
        if (trangThaiLoc != null && !trangThaiLoc.equals("T·∫•t c·∫£")) {
            sql.append(" AND BD.trangThai = ?");
        }
        
        try (PreparedStatement ps = con.prepareStatement(sql.toString())) {
            int paramIndex = 1;
            if (keyword != null && !keyword.trim().isEmpty()) {
                String likeKeyword = "%" + keyword + "%";
                ps.setString(paramIndex++, likeKeyword); // BD.maDatBan
                ps.setString(paramIndex++, likeKeyword); // KH.hoTenKH (ƒê√£ s·ª≠a)
                ps.setString(paramIndex++, likeKeyword); // KH.soDienThoai (ƒê√£ s·ª≠a)
                ps.setString(paramIndex++, likeKeyword); // BD.maBan
            }
            if (trangThaiLoc != null && !trangThaiLoc.equals("T·∫•t c·∫£")) {
                ps.setString(paramIndex++, trangThaiLoc);
            }

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    // Gi·∫£ ƒë·ªãnh h√†m createBanDatFromResultSet() t·ªìn t·∫°i v√† ho·∫°t ƒë·ªông ƒë√∫ng
                    dsDatBan.add(createBanDatFromResultSet(rs)); 
                }
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi t√¨m ki·∫øm ƒë·∫∑t b√†n: " + e.getMessage());
            e.printStackTrace();
        }
        return dsDatBan;
    }
    
   
    public String generateNewMaDatBan() {
        Connection con = ConnectDB.getConnection();
        String sql = "SELECT MAX(maDatBan) FROM BANDAT WHERE maDatBan LIKE 'DB%'";
        String lastId = null;
        try (PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                lastId = rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        if (lastId == null) {
            return "DB001";
        } else {
            // Gi·∫£ ƒë·ªãnh m√£ c√≥ d·∫°ng DBxxx
            try {
                int num = Integer.parseInt(lastId.substring(2)) + 1;
                return String.format("DB%03d", num);
            } catch (NumberFormatException e) {
                // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p m√£ kh√¥ng ƒë√∫ng format
                return "DB" + System.currentTimeMillis(); 
            }
        }
    }
    public double getTienCocByActiveMaBan(String maBan) {
        double tienCoc = 0;
        Connection con = ConnectDB.getConnection();
        
        // T√¨m b·∫£n ghi BANDAT ƒëang ho·∫°t ƒë·ªông (ch∆∞a thanh to√°n/h·ªßy) cho b√†n n√†y
        String sql = "SELECT tienCoc FROM BANDAT WHERE maBan = ? "; //AND trangThai IN (N'ƒêang s·ª≠ d·ª•ng', N'ƒê√£ ƒë·∫∑t', N'Tr·ªëng')";
        
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maBan);
            
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    tienCoc = rs.getDouble("tienCoc");
                }
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y ti·ªÅn c·ªçc theo m√£ b√†n: " + e.getMessage());
            e.printStackTrace();
        }
        return tienCoc;
    }
 // Trong l·ªõp dao.BanDat_DAO.java

    public boolean kiemTraXungDotDatBan(String maBan, LocalDate ngayDat, LocalTime gioDat) throws SQLException {
        Connection con = ConnectDB.getConnection();

        // T√≠nh kho·∫£ng th·ªùi gian tr∆∞·ªõc v√† sau 2 ti·∫øng
        LocalTime gioBatDau = gioDat.minusHours(2);
        LocalTime gioKetThuc = gioDat.plusHours(2);
       
       
        String sql = "SELECT COUNT(*) FROM BANDAT " +
                "WHERE maBan = ? AND ngayDat = ? " +
                "AND trangThai NOT IN (N'ƒê√£ h·ªßy', N'Ho√†n th√†nh') " +
                "AND CAST(gioDat AS TIME) BETWEEN CAST(? AS TIME) AND CAST(? AS TIME)";

        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, maBan);
            ps.setDate(2, java.sql.Date.valueOf(ngayDat));
            ps.setTime(3, java.sql.Time.valueOf(gioBatDau));
            ps.setTime(4, java.sql.Time.valueOf(gioKetThuc));

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // true n·∫øu c√≥ xung ƒë·ªôt
                }
               
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi ki·ªÉm tra xung ƒë·ªôt ƒë·∫∑t b√†n: " + e.getMessage());
            throw e;
        }

        return false;
 
  
    }


}